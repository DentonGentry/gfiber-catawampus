#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Sun Jul 31 03:54:21 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class BaseStatusFacet(GeneratedsSuper):
    """Base facet (status attribute)."""
    subclass = None
    superclass = None
    def __init__(self, status='current', description=None, extensiontype_=None):
        self.status = _cast(None, status)
        self.description = description
        self.anyAttributes_ = {}
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if BaseStatusFacet.subclass:
            return BaseStatusFacet.subclass(*args_, **kwargs_)
        else:
            return BaseStatusFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='BaseStatusFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BaseStatusFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='BaseStatusFacet'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='tns:', name_='BaseStatusFacet', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
    def hasContent_(self):
        if (
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BaseStatusFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
# end class BaseStatusFacet


class BaseAccessFacet(BaseStatusFacet):
    """Base facet (access, status and optional attributes)."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, access='readWrite', optional=False, extensiontype_=None):
        super(BaseAccessFacet, self).__init__(status, description, extensiontype_, )
        self.access = _cast(None, access)
        self.optional = _cast(bool, optional)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if BaseAccessFacet.subclass:
            return BaseAccessFacet.subclass(*args_, **kwargs_)
        else:
            return BaseAccessFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_access(self): return self.access
    def set_access(self, access): self.access = access
    def get_optional(self): return self.optional
    def set_optional(self, optional): self.optional = optional
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='BaseAccessFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BaseAccessFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='BaseAccessFacet'):
        super(BaseAccessFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='BaseAccessFacet')
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            outfile.write(' access=%s' % (quote_attrib(self.access), ))
        if self.optional is not None and 'optional' not in already_processed:
            already_processed.append('optional')
            outfile.write(' optional="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.optional)), input_name='optional'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='tns:', name_='BaseAccessFacet', fromsubclass_=False):
        super(BaseAccessFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(BaseAccessFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BaseAccessFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            showIndent(outfile, level)
            outfile.write('access = %s,\n' % (self.access,))
        if self.optional is not None and 'optional' not in already_processed:
            already_processed.append('optional')
            showIndent(outfile, level)
            outfile.write('optional = %s,\n' % (self.optional,))
        super(BaseAccessFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(BaseAccessFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('access', node)
        if value is not None and 'access' not in already_processed:
            already_processed.append('access')
            self.access = value
        value = find_attr_value_('optional', node)
        if value is not None and 'optional' not in already_processed:
            already_processed.append('optional')
            if value in ('true', '1'):
                self.optional = True
            elif value in ('false', '0'):
                self.optional = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
        super(BaseAccessFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(BaseAccessFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class BaseAccessFacet


class Bibliography(GeneratedsSuper):
    """Bibliography definition."""
    subclass = None
    superclass = None
    def __init__(self, description=None, reference=None):
        self.description = description
        if reference is None:
            self.reference = []
        else:
            self.reference = reference
    def factory(*args_, **kwargs_):
        if Bibliography.subclass:
            return Bibliography.subclass(*args_, **kwargs_)
        else:
            return Bibliography(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_reference(self): return self.reference
    def set_reference(self, reference): self.reference = reference
    def add_reference(self, value): self.reference.append(value)
    def insert_reference(self, index, value): self.reference[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='Bibliography', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Bibliography')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Bibliography'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Bibliography', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for reference_ in self.reference:
            reference_.export(outfile, level, namespace_, name_='reference')
    def hasContent_(self):
        if (
            self.description is not None or
            self.reference
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Bibliography'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('reference=[\n')
        level += 1
        for reference_ in self.reference:
            showIndent(outfile, level)
            outfile.write('model_.referenceType(\n')
            reference_.exportLiteral(outfile, level, name_='referenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'reference':
            obj_ = referenceType.factory()
            obj_.build(child_)
            self.reference.append(obj_)
# end class Bibliography


class ComponentDefinition(GeneratedsSuper):
    """Component definition.MUST be unique within the document, including
    imported components (this is checked by schema validation)."""
    subclass = None
    superclass = None
    def __init__(self, status='current', name=None, id=None, description=None, component=None, parameter=None, object=None, profile=None):
        self.status = _cast(None, status)
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.description = description
        if component is None:
            self.component = []
        else:
            self.component = component
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        if object is None:
            self.object = []
        else:
            self.object = object
        if profile is None:
            self.profile = []
        else:
            self.profile = profile
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ComponentDefinition.subclass:
            return ComponentDefinition.subclass(*args_, **kwargs_)
        else:
            return ComponentDefinition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_object(self): return self.object
    def set_object(self, object): self.object = object
    def add_object(self, value): self.object.append(value)
    def insert_object(self, index, value): self.object[index] = value
    def get_profile(self): return self.profile
    def set_profile(self, profile): self.profile = profile
    def add_profile(self, value): self.profile.append(value)
    def insert_profile(self, index, value): self.profile[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ComponentDefinition', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentDefinition')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ComponentDefinition'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ComponentDefinition', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component')
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
        for object_ in self.object:
            object_.export(outfile, level, namespace_, name_='object')
        for profile_ in self.profile:
            profile_.export(outfile, level, namespace_, name_='profile')
    def hasContent_(self):
        if (
            self.description is not None or
            self.component or
            self.parameter or
            self.object or
            self.profile
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ComponentDefinition'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentReference(\n')
            component_.exportLiteral(outfile, level, name_='ComponentReference')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.ModelParameter(\n')
            parameter_.exportLiteral(outfile, level, name_='ModelParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('object=[\n')
        level += 1
        for object_ in self.object:
            showIndent(outfile, level)
            outfile.write('model_.ModelObject(\n')
            object_.exportLiteral(outfile, level, name_='ModelObject')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('profile=[\n')
        level += 1
        for profile_ in self.profile:
            showIndent(outfile, level)
            outfile.write('model_.Profile(\n')
            profile_.exportLiteral(outfile, level, name_='Profile')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'component':
            obj_ = ComponentReference.factory()
            obj_.build(child_)
            self.component.append(obj_)
        elif nodeName_ == 'parameter':
            obj_ = ModelParameter.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
        elif nodeName_ == 'object':
            obj_ = ModelObject.factory()
            obj_.build(child_)
            self.object.append(obj_)
        elif nodeName_ == 'profile':
            obj_ = Profile.factory()
            obj_.build(child_)
            self.profile.append(obj_)
# end class ComponentDefinition


class ComponentReference(GeneratedsSuper):
    """Component reference.Name of component to be referenced (included).If
    specified, is relative path between point of reference
    (inclusion) and the component's items. If not specified,
    behavior is as if an empty relative path was specified."""
    subclass = None
    superclass = None
    def __init__(self, path=None, ref=None):
        self.path = _cast(None, path)
        self.ref = _cast(None, ref)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ComponentReference.subclass:
            return ComponentReference.subclass(*args_, **kwargs_)
        else:
            return ComponentReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_path(self): return self.path
    def set_path(self, path): self.path = path
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ComponentReference', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentReference')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ComponentReference'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.path is not None and 'path' not in already_processed:
            already_processed.append('path')
            outfile.write(' path=%s' % (quote_attrib(self.path), ))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ComponentReference', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ComponentReference'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.path is not None and 'path' not in already_processed:
            already_processed.append('path')
            showIndent(outfile, level)
            outfile.write('path = %s,\n' % (self.path,))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('path', node)
        if value is not None and 'path' not in already_processed:
            already_processed.append('path')
            self.path = value
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ComponentReference


class DataTypeDefinition(GeneratedsSuper):
    """Parameter data type definition.MUST be unique within the document,
    including imported data types (this is checked by schema
    validation). Cannot begin with a lower-case letter, in order to
    avoid confusion with built-in data types.MUST be present if and
    only if deriving from a non-built-in data type. See A.2.3.1."""
    subclass = None
    superclass = None
    def __init__(self, status='current', base=None, name=None, id=None, description=None, size=None, instanceRef=None, pathRef=None, range=None, enumeration=None, enumerationRef=None, pattern=None, units=None, base64=None, boolean=None, dateTime=None, hexBinary=None, int=None, long=None, string=None, unsignedInt=None, unsignedLong=None):
        self.status = _cast(None, status)
        self.base = _cast(None, base)
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.description = description
        if size is None:
            self.size = []
        else:
            self.size = size
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if pathRef is None:
            self.pathRef = []
        else:
            self.pathRef = pathRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
        if enumerationRef is None:
            self.enumerationRef = []
        else:
            self.enumerationRef = enumerationRef
        if pattern is None:
            self.pattern = []
        else:
            self.pattern = pattern
        if units is None:
            self.units = []
        else:
            self.units = units
        self.base64 = base64
        self.boolean = boolean
        self.dateTime = dateTime
        self.hexBinary = hexBinary
        self.int = int
        self.long = long
        self.string = string
        self.unsignedInt = unsignedInt
        self.unsignedLong = unsignedLong
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if DataTypeDefinition.subclass:
            return DataTypeDefinition.subclass(*args_, **kwargs_)
        else:
            return DataTypeDefinition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_pathRef(self): return self.pathRef
    def set_pathRef(self, pathRef): self.pathRef = pathRef
    def add_pathRef(self, value): self.pathRef.append(value)
    def insert_pathRef(self, index, value): self.pathRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration(self, index, value): self.enumeration[index] = value
    def get_enumerationRef(self): return self.enumerationRef
    def set_enumerationRef(self, enumerationRef): self.enumerationRef = enumerationRef
    def add_enumerationRef(self, value): self.enumerationRef.append(value)
    def insert_enumerationRef(self, index, value): self.enumerationRef[index] = value
    def get_pattern(self): return self.pattern
    def set_pattern(self, pattern): self.pattern = pattern
    def add_pattern(self, value): self.pattern.append(value)
    def insert_pattern(self, index, value): self.pattern[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_base64(self): return self.base64
    def set_base64(self, base64): self.base64 = base64
    def get_boolean(self): return self.boolean
    def set_boolean(self, boolean): self.boolean = boolean
    def get_dateTime(self): return self.dateTime
    def set_dateTime(self, dateTime): self.dateTime = dateTime
    def get_hexBinary(self): return self.hexBinary
    def set_hexBinary(self, hexBinary): self.hexBinary = hexBinary
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def get_long(self): return self.long
    def set_long(self, long): self.long = long
    def get_string(self): return self.string
    def set_string(self, string): self.string = string
    def get_unsignedInt(self): return self.unsignedInt
    def set_unsignedInt(self, unsignedInt): self.unsignedInt = unsignedInt
    def get_unsignedLong(self): return self.unsignedLong
    def set_unsignedLong(self, unsignedLong): self.unsignedLong = unsignedLong
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='DataTypeDefinition', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataTypeDefinition')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DataTypeDefinition'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DataTypeDefinition', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for pathRef_ in self.pathRef:
            pathRef_.export(outfile, level, namespace_, name_='pathRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration')
        for enumerationRef_ in self.enumerationRef:
            enumerationRef_.export(outfile, level, namespace_, name_='enumerationRef')
        for pattern_ in self.pattern:
            pattern_.export(outfile, level, namespace_, name_='pattern')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
        if self.base64:
            self.base64.export(outfile, level, namespace_, name_='base64')
        if self.boolean:
            self.boolean.export(outfile, level, namespace_, name_='boolean')
        if self.dateTime:
            self.dateTime.export(outfile, level, namespace_, name_='dateTime')
        if self.hexBinary:
            self.hexBinary.export(outfile, level, namespace_, name_='hexBinary')
        if self.int:
            self.int.export(outfile, level, namespace_, name_='int')
        if self.long:
            self.long.export(outfile, level, namespace_, name_='long')
        if self.string:
            self.string.export(outfile, level, namespace_, name_='string')
        if self.unsignedInt:
            self.unsignedInt.export(outfile, level, namespace_, name_='unsignedInt')
        if self.unsignedLong:
            self.unsignedLong.export(outfile, level, namespace_, name_='unsignedLong')
    def hasContent_(self):
        if (
            self.description is not None or
            self.size or
            self.instanceRef or
            self.pathRef or
            self.range or
            self.enumeration or
            self.enumerationRef or
            self.pattern or
            self.units or
            self.base64 is not None or
            self.boolean is not None or
            self.dateTime is not None or
            self.hexBinary is not None or
            self.int is not None or
            self.long is not None or
            self.string is not None or
            self.unsignedInt is not None or
            self.unsignedLong is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataTypeDefinition'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pathRef=[\n')
        level += 1
        for pathRef_ in self.pathRef:
            showIndent(outfile, level)
            outfile.write('model_.PathRefFacet(\n')
            pathRef_.exportLiteral(outfile, level, name_='PathRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumeration=[\n')
        level += 1
        for enumeration_ in self.enumeration:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationFacet(\n')
            enumeration_.exportLiteral(outfile, level, name_='EnumerationFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumerationRef=[\n')
        level += 1
        for enumerationRef_ in self.enumerationRef:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationRefFacet(\n')
            enumerationRef_.exportLiteral(outfile, level, name_='EnumerationRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pattern=[\n')
        level += 1
        for pattern_ in self.pattern:
            showIndent(outfile, level)
            outfile.write('model_.PatternFacet(\n')
            pattern_.exportLiteral(outfile, level, name_='PatternFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.base64 is not None:
            showIndent(outfile, level)
            outfile.write('base64=model_.base64Type1(\n')
            self.base64.exportLiteral(outfile, level, name_='base64')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.boolean is not None:
            showIndent(outfile, level)
            outfile.write('boolean=model_.booleanType1(\n')
            self.boolean.exportLiteral(outfile, level, name_='boolean')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dateTime is not None:
            showIndent(outfile, level)
            outfile.write('dateTime=model_.dateTimeType1(\n')
            self.dateTime.exportLiteral(outfile, level, name_='dateTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hexBinary is not None:
            showIndent(outfile, level)
            outfile.write('hexBinary=model_.hexBinaryType1(\n')
            self.hexBinary.exportLiteral(outfile, level, name_='hexBinary')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.int is not None:
            showIndent(outfile, level)
            outfile.write('int=model_.intType1(\n')
            self.int.exportLiteral(outfile, level, name_='int')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.long is not None:
            showIndent(outfile, level)
            outfile.write('long=model_.longType1(\n')
            self.long.exportLiteral(outfile, level, name_='long')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.string is not None:
            showIndent(outfile, level)
            outfile.write('string=model_.stringType1(\n')
            self.string.exportLiteral(outfile, level, name_='string')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unsignedInt is not None:
            showIndent(outfile, level)
            outfile.write('unsignedInt=model_.unsignedIntType1(\n')
            self.unsignedInt.exportLiteral(outfile, level, name_='unsignedInt')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unsignedLong is not None:
            showIndent(outfile, level)
            outfile.write('unsignedLong=model_.unsignedLongType1(\n')
            self.unsignedLong.exportLiteral(outfile, level, name_='unsignedLong')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        elif nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'pathRef':
            obj_ = PathRefFacet.factory()
            obj_.build(child_)
            self.pathRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'enumeration':
            obj_ = EnumerationFacet.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
        elif nodeName_ == 'enumerationRef':
            obj_ = EnumerationRefFacet.factory()
            obj_.build(child_)
            self.enumerationRef.append(obj_)
        elif nodeName_ == 'pattern':
            obj_ = PatternFacet.factory()
            obj_.build(child_)
            self.pattern.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
        elif nodeName_ == 'base64':
            obj_ = base64Type1.factory()
            obj_.build(child_)
            self.set_base64(obj_)
        elif nodeName_ == 'boolean':
            obj_ = booleanType1.factory()
            obj_.build(child_)
            self.set_boolean(obj_)
        elif nodeName_ == 'dateTime':
            obj_ = dateTimeType1.factory()
            obj_.build(child_)
            self.set_dateTime(obj_)
        elif nodeName_ == 'hexBinary':
            obj_ = hexBinaryType1.factory()
            obj_.build(child_)
            self.set_hexBinary(obj_)
        elif nodeName_ == 'int':
            obj_ = intType1.factory()
            obj_.build(child_)
            self.set_int(obj_)
        elif nodeName_ == 'long':
            obj_ = longType1.factory()
            obj_.build(child_)
            self.set_long(obj_)
        elif nodeName_ == 'string':
            obj_ = stringType1.factory()
            obj_.build(child_)
            self.set_string(obj_)
        elif nodeName_ == 'unsignedInt':
            obj_ = unsignedIntType1.factory()
            obj_.build(child_)
            self.set_unsignedInt(obj_)
        elif nodeName_ == 'unsignedLong':
            obj_ = unsignedLongType1.factory()
            obj_.build(child_)
            self.set_unsignedLong(obj_)
# end class DataTypeDefinition


class DataTypeReference(GeneratedsSuper):
    """Parameter data type reference or anonymous restriction /
    extension.If specified, content MUST be empty.If specified,
    content MUST NOT be empty."""
    subclass = None
    superclass = None
    def __init__(self, base=None, ref=None, size=None, instanceRef=None, pathRef=None, range=None, enumeration=None, enumerationRef=None, pattern=None, units=None):
        self.base = _cast(None, base)
        self.ref = _cast(None, ref)
        if size is None:
            self.size = []
        else:
            self.size = size
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if pathRef is None:
            self.pathRef = []
        else:
            self.pathRef = pathRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
        if enumerationRef is None:
            self.enumerationRef = []
        else:
            self.enumerationRef = enumerationRef
        if pattern is None:
            self.pattern = []
        else:
            self.pattern = pattern
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if DataTypeReference.subclass:
            return DataTypeReference.subclass(*args_, **kwargs_)
        else:
            return DataTypeReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_pathRef(self): return self.pathRef
    def set_pathRef(self, pathRef): self.pathRef = pathRef
    def add_pathRef(self, value): self.pathRef.append(value)
    def insert_pathRef(self, index, value): self.pathRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration(self, index, value): self.enumeration[index] = value
    def get_enumerationRef(self): return self.enumerationRef
    def set_enumerationRef(self, enumerationRef): self.enumerationRef = enumerationRef
    def add_enumerationRef(self, value): self.enumerationRef.append(value)
    def insert_enumerationRef(self, index, value): self.enumerationRef[index] = value
    def get_pattern(self): return self.pattern
    def set_pattern(self, pattern): self.pattern = pattern
    def add_pattern(self, value): self.pattern.append(value)
    def insert_pattern(self, index, value): self.pattern[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='DataTypeReference', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataTypeReference')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DataTypeReference'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DataTypeReference', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for pathRef_ in self.pathRef:
            pathRef_.export(outfile, level, namespace_, name_='pathRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration')
        for enumerationRef_ in self.enumerationRef:
            enumerationRef_.export(outfile, level, namespace_, name_='enumerationRef')
        for pattern_ in self.pattern:
            pattern_.export(outfile, level, namespace_, name_='pattern')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.size or
            self.instanceRef or
            self.pathRef or
            self.range or
            self.enumeration or
            self.enumerationRef or
            self.pattern or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataTypeReference'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pathRef=[\n')
        level += 1
        for pathRef_ in self.pathRef:
            showIndent(outfile, level)
            outfile.write('model_.PathRefFacet(\n')
            pathRef_.exportLiteral(outfile, level, name_='PathRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumeration=[\n')
        level += 1
        for enumeration_ in self.enumeration:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationFacet(\n')
            enumeration_.exportLiteral(outfile, level, name_='EnumerationFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumerationRef=[\n')
        level += 1
        for enumerationRef_ in self.enumerationRef:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationRefFacet(\n')
            enumerationRef_.exportLiteral(outfile, level, name_='EnumerationRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pattern=[\n')
        level += 1
        for pattern_ in self.pattern:
            showIndent(outfile, level)
            outfile.write('model_.PatternFacet(\n')
            pattern_.exportLiteral(outfile, level, name_='PatternFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        elif nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'pathRef':
            obj_ = PathRefFacet.factory()
            obj_.build(child_)
            self.pathRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'enumeration':
            obj_ = EnumerationFacet.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
        elif nodeName_ == 'enumerationRef':
            obj_ = EnumerationRefFacet.factory()
            obj_.build(child_)
            self.enumerationRef.append(obj_)
        elif nodeName_ == 'pattern':
            obj_ = PatternFacet.factory()
            obj_.build(child_)
            self.pattern.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class DataTypeReference


class DefaultFacet(BaseStatusFacet):
    """Default facet.Value MUST be valid for the data type."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, type_=None, value=None):
        super(DefaultFacet, self).__init__(status, description, )
        self.type_ = _cast(None, type_)
        self.value = _cast(None, value)
        pass
    def factory(*args_, **kwargs_):
        if DefaultFacet.subclass:
            return DefaultFacet.subclass(*args_, **kwargs_)
        else:
            return DefaultFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='DefaultFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DefaultFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='DefaultFacet'):
        super(DefaultFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='DefaultFacet')
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='DefaultFacet', fromsubclass_=False):
        super(DefaultFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(DefaultFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DefaultFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        super(DefaultFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(DefaultFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        super(DefaultFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(DefaultFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class DefaultFacet


class Description(GeneratedsSuper):
    """Description: free text which MAY contain a limited amount of
    mediawiki-like markup as specified in A.2.2. For example, use
    "*" at the start of a line to indicate a bulleted list. To avoid
    confusion, the description SHOULD NOT contain tab characters.
    For BBF standards, the character set MUST be restricted to
    printable characters in the Basic Latin Unicode block, i.e. to
    characters whose decimal ASCII representations are in the
    (inclusive) ranges 9-10 and 32-126.This MUST be specified when
    the description modifies that of a previously defined item.
    Specify "prefix" to prefix to the previous description, "append"
    to append to the previous description, or "replace" to replace
    the previous description."""
    subclass = None
    superclass = None
    def __init__(self, action='create', valueOf_=None):
        self.action = _cast(None, action)
        self.valueOf_ = valueOf_
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if Description.subclass:
            return Description.subclass(*args_, **kwargs_)
        else:
            return Description(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='Description', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Description')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Description'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.action is not None and 'action' not in already_processed:
            already_processed.append('action')
            outfile.write(' action=%s' % (quote_attrib(self.action), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Description', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Description'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.action is not None and 'action' not in already_processed:
            already_processed.append('action')
            showIndent(outfile, level)
            outfile.write('action = %s,\n' % (self.action,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('action', node)
        if value is not None and 'action' not in already_processed:
            already_processed.append('action')
            self.action = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Description


class EnumerationFacet(BaseAccessFacet):
    """Enumeration facet."""
    subclass = None
    superclass = BaseAccessFacet
    def __init__(self, status='current', description=None, access='readWrite', optional=False, code=None, value=None):
        super(EnumerationFacet, self).__init__(status, description, access, optional, )
        self.code = _cast(int, code)
        self.value = _cast(None, value)
        pass
    def factory(*args_, **kwargs_):
        if EnumerationFacet.subclass:
            return EnumerationFacet.subclass(*args_, **kwargs_)
        else:
            return EnumerationFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='EnumerationFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EnumerationFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EnumerationFacet'):
        super(EnumerationFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EnumerationFacet')
        if self.code is not None and 'code' not in already_processed:
            already_processed.append('code')
            outfile.write(' code="%s"' % self.gds_format_integer(self.code, input_name='code'))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EnumerationFacet', fromsubclass_=False):
        super(EnumerationFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(EnumerationFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EnumerationFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.code is not None and 'code' not in already_processed:
            already_processed.append('code')
            showIndent(outfile, level)
            outfile.write('code = %d,\n' % (self.code,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        super(EnumerationFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(EnumerationFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('code', node)
        if value is not None and 'code' not in already_processed:
            already_processed.append('code')
            try:
                self.code = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        super(EnumerationFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(EnumerationFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class EnumerationFacet


class EnumerationRefFacet(BaseStatusFacet):
    """Enumeration reference facet.MUST reference a list-valued
    parameter.Specifies the point in the naming hierarchy relative
    to which targetParam applies (A.2.3.4).Specifies the value that
    indicates that none of the values of the referenced parameter
    currently apply."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, targetParam=None, targetParamScope='normal', nullValue=None):
        super(EnumerationRefFacet, self).__init__(status, description, )
        self.targetParam = _cast(None, targetParam)
        self.targetParamScope = _cast(None, targetParamScope)
        self.nullValue = _cast(None, nullValue)
        pass
    def factory(*args_, **kwargs_):
        if EnumerationRefFacet.subclass:
            return EnumerationRefFacet.subclass(*args_, **kwargs_)
        else:
            return EnumerationRefFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_targetParam(self): return self.targetParam
    def set_targetParam(self, targetParam): self.targetParam = targetParam
    def get_targetParamScope(self): return self.targetParamScope
    def set_targetParamScope(self, targetParamScope): self.targetParamScope = targetParamScope
    def get_nullValue(self): return self.nullValue
    def set_nullValue(self, nullValue): self.nullValue = nullValue
    def export(self, outfile, level, namespace_='tns:', name_='EnumerationRefFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EnumerationRefFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='EnumerationRefFacet'):
        super(EnumerationRefFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EnumerationRefFacet')
        if self.targetParam is not None and 'targetParam' not in already_processed:
            already_processed.append('targetParam')
            outfile.write(' targetParam=%s' % (quote_attrib(self.targetParam), ))
        if self.targetParamScope is not None and 'targetParamScope' not in already_processed:
            already_processed.append('targetParamScope')
            outfile.write(' targetParamScope=%s' % (quote_attrib(self.targetParamScope), ))
        if self.nullValue is not None and 'nullValue' not in already_processed:
            already_processed.append('nullValue')
            outfile.write(' nullValue=%s' % (self.gds_format_string(quote_attrib(self.nullValue).encode(ExternalEncoding), input_name='nullValue'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='EnumerationRefFacet', fromsubclass_=False):
        super(EnumerationRefFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(EnumerationRefFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EnumerationRefFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.targetParam is not None and 'targetParam' not in already_processed:
            already_processed.append('targetParam')
            showIndent(outfile, level)
            outfile.write('targetParam = %s,\n' % (self.targetParam,))
        if self.targetParamScope is not None and 'targetParamScope' not in already_processed:
            already_processed.append('targetParamScope')
            showIndent(outfile, level)
            outfile.write('targetParamScope = %s,\n' % (self.targetParamScope,))
        if self.nullValue is not None and 'nullValue' not in already_processed:
            already_processed.append('nullValue')
            showIndent(outfile, level)
            outfile.write('nullValue = "%s",\n' % (self.nullValue,))
        super(EnumerationRefFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(EnumerationRefFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('targetParam', node)
        if value is not None and 'targetParam' not in already_processed:
            already_processed.append('targetParam')
            self.targetParam = value
        value = find_attr_value_('targetParamScope', node)
        if value is not None and 'targetParamScope' not in already_processed:
            already_processed.append('targetParamScope')
            self.targetParamScope = value
        value = find_attr_value_('nullValue', node)
        if value is not None and 'nullValue' not in already_processed:
            already_processed.append('nullValue')
            self.nullValue = value
            self.nullValue = ' '.join(self.nullValue.split())
        super(EnumerationRefFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(EnumerationRefFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class EnumerationRefFacet


class Import(GeneratedsSuper):
    """Import data types, components and models (Root and Service Objects)
    from external documents. All such items MUST be imported (this
    is checked by schema validation). The optional ref attribute MAY
    be used in order to avoid name conflicts between imported and
    locally-defined items.MUST be used to locate the DM Instance
    (A.2.1).If specified, processing tools MUST regard a mismatch
    between this and the external document's spec attribute as an
    error."""
    subclass = None
    superclass = None
    def __init__(self, spec=None, file=None, dataType=None, component=None, model=None):
        self.spec = _cast(None, spec)
        self.file = _cast(None, file)
        if dataType is None:
            self.dataType = []
        else:
            self.dataType = dataType
        if component is None:
            self.component = []
        else:
            self.component = component
        if model is None:
            self.model = []
        else:
            self.model = model
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if Import.subclass:
            return Import.subclass(*args_, **kwargs_)
        else:
            return Import(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataType(self): return self.dataType
    def set_dataType(self, dataType): self.dataType = dataType
    def add_dataType(self, value): self.dataType.append(value)
    def insert_dataType(self, index, value): self.dataType[index] = value
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def get_model(self): return self.model
    def set_model(self, model): self.model = model
    def add_model(self, value): self.model.append(value)
    def insert_model(self, index, value): self.model[index] = value
    def get_spec(self): return self.spec
    def set_spec(self, spec): self.spec = spec
    def get_file(self): return self.file
    def set_file(self, file): self.file = file
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='Import', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Import')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Import'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.spec is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            outfile.write(' spec=%s' % (self.gds_format_string(quote_attrib(self.spec).encode(ExternalEncoding), input_name='spec'), ))
        if self.file is not None and 'file' not in already_processed:
            already_processed.append('file')
            outfile.write(' file=%s' % (self.gds_format_string(quote_attrib(self.file).encode(ExternalEncoding), input_name='file'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Import', fromsubclass_=False):
        for dataType_ in self.dataType:
            dataType_.export(outfile, level, namespace_, name_='dataType')
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component')
        for model_ in self.model:
            model_.export(outfile, level, namespace_, name_='model')
    def hasContent_(self):
        if (
            self.dataType or
            self.component or
            self.model
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Import'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.spec is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            showIndent(outfile, level)
            outfile.write('spec = "%s",\n' % (self.spec,))
        if self.file is not None and 'file' not in already_processed:
            already_processed.append('file')
            showIndent(outfile, level)
            outfile.write('file = "%s",\n' % (self.file,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dataType=[\n')
        level += 1
        for dataType_ in self.dataType:
            showIndent(outfile, level)
            outfile.write('model_.dataTypeType(\n')
            dataType_.exportLiteral(outfile, level, name_='dataTypeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.componentType(\n')
            component_.exportLiteral(outfile, level, name_='componentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('model=[\n')
        level += 1
        for model_ in self.model:
            showIndent(outfile, level)
            outfile.write('model_.modelType(\n')
            model_.exportLiteral(outfile, level, name_='modelType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('spec', node)
        if value is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            self.spec = value
        value = find_attr_value_('file', node)
        if value is not None and 'file' not in already_processed:
            already_processed.append('file')
            self.file = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataType':
            obj_ = dataTypeType.factory()
            obj_.build(child_)
            self.dataType.append(obj_)
        elif nodeName_ == 'component':
            obj_ = componentType.factory()
            obj_.build(child_)
            self.component.append(obj_)
        elif nodeName_ == 'model':
            obj_ = modelType.factory()
            obj_.build(child_)
            self.model.append(obj_)
# end class Import


class InstanceRefFacet(BaseStatusFacet):
    """Instance number reference facet.Specifies the type of reference
    (A.2.3.6).MUST reference a multi-instance object (table)
    (A.2.3.4).Specifies the point in the naming hierarchy relative
    to which targetParent applies (A.2.3.4)."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, refType=None, targetParentScope='normal', targetParent=None):
        super(InstanceRefFacet, self).__init__(status, description, )
        self.refType = _cast(None, refType)
        self.targetParentScope = _cast(None, targetParentScope)
        self.targetParent = _cast(None, targetParent)
        pass
    def factory(*args_, **kwargs_):
        if InstanceRefFacet.subclass:
            return InstanceRefFacet.subclass(*args_, **kwargs_)
        else:
            return InstanceRefFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refType(self): return self.refType
    def set_refType(self, refType): self.refType = refType
    def get_targetParentScope(self): return self.targetParentScope
    def set_targetParentScope(self, targetParentScope): self.targetParentScope = targetParentScope
    def get_targetParent(self): return self.targetParent
    def set_targetParent(self, targetParent): self.targetParent = targetParent
    def export(self, outfile, level, namespace_='tns:', name_='InstanceRefFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InstanceRefFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='InstanceRefFacet'):
        super(InstanceRefFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='InstanceRefFacet')
        if self.refType is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            outfile.write(' refType=%s' % (quote_attrib(self.refType), ))
        if self.targetParentScope is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            outfile.write(' targetParentScope=%s' % (quote_attrib(self.targetParentScope), ))
        if self.targetParent is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            outfile.write(' targetParent=%s' % (quote_attrib(self.targetParent), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='InstanceRefFacet', fromsubclass_=False):
        super(InstanceRefFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(InstanceRefFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InstanceRefFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.refType is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            showIndent(outfile, level)
            outfile.write('refType = %s,\n' % (self.refType,))
        if self.targetParentScope is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            showIndent(outfile, level)
            outfile.write('targetParentScope = %s,\n' % (self.targetParentScope,))
        if self.targetParent is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            showIndent(outfile, level)
            outfile.write('targetParent = %s,\n' % (self.targetParent,))
        super(InstanceRefFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(InstanceRefFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refType', node)
        if value is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            self.refType = value
        value = find_attr_value_('targetParentScope', node)
        if value is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            self.targetParentScope = value
        value = find_attr_value_('targetParent', node)
        if value is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            self.targetParent = value
        super(InstanceRefFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(InstanceRefFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class InstanceRefFacet


class ListFacet(BaseStatusFacet):
    """List facet."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, minItems=0, maxItems='unbounded', size=None):
        super(ListFacet, self).__init__(status, description, )
        self.minItems = _cast(int, minItems)
        self.maxItems = _cast(None, maxItems)
        if size is None:
            self.size = []
        else:
            self.size = size
    def factory(*args_, **kwargs_):
        if ListFacet.subclass:
            return ListFacet.subclass(*args_, **kwargs_)
        else:
            return ListFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_minItems(self): return self.minItems
    def set_minItems(self, minItems): self.minItems = minItems
    def get_maxItems(self): return self.maxItems
    def set_maxItems(self, maxItems): self.maxItems = maxItems
    def export(self, outfile, level, namespace_='tns:', name_='ListFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ListFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ListFacet'):
        super(ListFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ListFacet')
        if self.minItems is not None and 'minItems' not in already_processed:
            already_processed.append('minItems')
            outfile.write(' minItems="%s"' % self.gds_format_integer(self.minItems, input_name='minItems'))
        if self.maxItems is not None and 'maxItems' not in already_processed:
            already_processed.append('maxItems')
            outfile.write(' maxItems=%s' % (quote_attrib(self.maxItems), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ListFacet', fromsubclass_=False):
        super(ListFacet, self).exportChildren(outfile, level, namespace_, name_, True)
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size or
            super(ListFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ListFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.minItems is not None and 'minItems' not in already_processed:
            already_processed.append('minItems')
            showIndent(outfile, level)
            outfile.write('minItems = %d,\n' % (self.minItems,))
        if self.maxItems is not None and 'maxItems' not in already_processed:
            already_processed.append('maxItems')
            showIndent(outfile, level)
            outfile.write('maxItems = %s,\n' % (self.maxItems,))
        super(ListFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(ListFacet, self).exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minItems', node)
        if value is not None and 'minItems' not in already_processed:
            already_processed.append('minItems')
            try:
                self.minItems = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.minItems < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('maxItems', node)
        if value is not None and 'maxItems' not in already_processed:
            already_processed.append('maxItems')
            self.maxItems = value
        super(ListFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        super(ListFacet, self).buildChildren(child_, node, nodeName_, True)
# end class ListFacet


class Model(GeneratedsSuper):
    """Model (Root or Service Object) definition and reference.MUST be
    unique within the document, including imported models (this is
    checked by schema validation).MUST be present if and only if
    extending an existing model. See A.2.10."""
    subclass = None
    superclass = None
    def __init__(self, isService=False, status='current', base=None, name=None, id=None, description=None, component=None, parameter=None, object=None, profile=None):
        self.isService = _cast(bool, isService)
        self.status = _cast(None, status)
        self.base = _cast(None, base)
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.description = description
        if component is None:
            self.component = []
        else:
            self.component = component
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        if object is None:
            self.object = []
        else:
            self.object = object
        if profile is None:
            self.profile = []
        else:
            self.profile = profile
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if Model.subclass:
            return Model.subclass(*args_, **kwargs_)
        else:
            return Model(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_object(self): return self.object
    def set_object(self, object): self.object = object
    def add_object(self, value): self.object.append(value)
    def insert_object(self, index, value): self.object[index] = value
    def get_profile(self): return self.profile
    def set_profile(self, profile): self.profile = profile
    def add_profile(self, value): self.profile.append(value)
    def insert_profile(self, index, value): self.profile[index] = value
    def get_isService(self): return self.isService
    def set_isService(self, isService): self.isService = isService
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='Model', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Model')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Model'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.isService is not None and 'isService' not in already_processed:
            already_processed.append('isService')
            outfile.write(' isService="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.isService)), input_name='isService'))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Model', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component')
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
        for object_ in self.object:
            object_.export(outfile, level, namespace_, name_='object')
        for profile_ in self.profile:
            profile_.export(outfile, level, namespace_, name_='profile')
    def hasContent_(self):
        if (
            self.description is not None or
            self.component or
            self.parameter or
            self.object or
            self.profile
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Model'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.isService is not None and 'isService' not in already_processed:
            already_processed.append('isService')
            showIndent(outfile, level)
            outfile.write('isService = %s,\n' % (self.isService,))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentReference(\n')
            component_.exportLiteral(outfile, level, name_='ComponentReference')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.ModelParameter(\n')
            parameter_.exportLiteral(outfile, level, name_='ModelParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('object=[\n')
        level += 1
        for object_ in self.object:
            showIndent(outfile, level)
            outfile.write('model_.ModelObject(\n')
            object_.exportLiteral(outfile, level, name_='ModelObject')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('profile=[\n')
        level += 1
        for profile_ in self.profile:
            showIndent(outfile, level)
            outfile.write('model_.Profile(\n')
            profile_.exportLiteral(outfile, level, name_='Profile')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('isService', node)
        if value is not None and 'isService' not in already_processed:
            already_processed.append('isService')
            if value in ('true', '1'):
                self.isService = True
            elif value in ('false', '0'):
                self.isService = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'component':
            obj_ = ComponentReference.factory()
            obj_.build(child_)
            self.component.append(obj_)
        elif nodeName_ == 'parameter':
            obj_ = ModelParameter.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
        elif nodeName_ == 'object':
            obj_ = ModelObject.factory()
            obj_.build(child_)
            self.object.append(obj_)
        elif nodeName_ == 'profile':
            obj_ = Profile.factory()
            obj_.build(child_)
            self.profile.append(obj_)
# end class Model


class ModelObject(GeneratedsSuper):
    """Object definition and reference. See A.2.8.1 for details of how
    tables are represented.MUST be unique within the component or
    model (this is checked by schema validation). MUST be present if
    and only if defining a new object. If the object is a table (see
    maxEntries), the final part of the name MUST be "{i}.".MUST be
    present if and only if modifying an existing object.minEntries
    MUST be less than or equal to maxEntries (all values are
    regarded as being less than "unbounded").minEntries and
    maxEntries indicate whether the object is a table: *
    minEntries=0, maxEntries=1 : single-instance object which might
    not be allowed to exist, e.g. because only one of it and another
    object can exist at the same time * minEntries=1, maxEntries=1 :
    single-instance object that is always allowed to exist * all
    other cases : object is a tableMUST be specified for a table
    with a variable number of entries, i.e. for which maxEntries is
    greater than minEntries ("unbounded" is regarded as being
    greater than all values).MUST be specified for a table in which
    the ACS can create entries and which has one or more uniqueKey
    elements that define functional keys."""
    subclass = None
    superclass = None
    def __init__(self, maxEntries=None, status='current', name=None, numEntriesParameter=None, minEntries=None, access=None, base=None, enableParameter=None, id=None, description=None, uniqueKey=None, component=None, parameter=None):
        self.maxEntries = _cast(None, maxEntries)
        self.status = _cast(None, status)
        self.name = _cast(None, name)
        self.numEntriesParameter = _cast(None, numEntriesParameter)
        self.minEntries = _cast(int, minEntries)
        self.access = _cast(None, access)
        self.base = _cast(None, base)
        self.enableParameter = _cast(None, enableParameter)
        self.id = _cast(None, id)
        self.description = description
        if uniqueKey is None:
            self.uniqueKey = []
        else:
            self.uniqueKey = uniqueKey
        if component is None:
            self.component = []
        else:
            self.component = component
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ModelObject.subclass:
            return ModelObject.subclass(*args_, **kwargs_)
        else:
            return ModelObject(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_uniqueKey(self): return self.uniqueKey
    def set_uniqueKey(self, uniqueKey): self.uniqueKey = uniqueKey
    def add_uniqueKey(self, value): self.uniqueKey.append(value)
    def insert_uniqueKey(self, index, value): self.uniqueKey[index] = value
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_maxEntries(self): return self.maxEntries
    def set_maxEntries(self, maxEntries): self.maxEntries = maxEntries
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_numEntriesParameter(self): return self.numEntriesParameter
    def set_numEntriesParameter(self, numEntriesParameter): self.numEntriesParameter = numEntriesParameter
    def get_minEntries(self): return self.minEntries
    def set_minEntries(self, minEntries): self.minEntries = minEntries
    def get_access(self): return self.access
    def set_access(self, access): self.access = access
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_enableParameter(self): return self.enableParameter
    def set_enableParameter(self, enableParameter): self.enableParameter = enableParameter
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ModelObject', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ModelObject')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ModelObject'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.maxEntries is not None and 'maxEntries' not in already_processed:
            already_processed.append('maxEntries')
            outfile.write(' maxEntries=%s' % (quote_attrib(self.maxEntries), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.numEntriesParameter is not None and 'numEntriesParameter' not in already_processed:
            already_processed.append('numEntriesParameter')
            outfile.write(' numEntriesParameter=%s' % (quote_attrib(self.numEntriesParameter), ))
        if self.minEntries is not None and 'minEntries' not in already_processed:
            already_processed.append('minEntries')
            outfile.write(' minEntries="%s"' % self.gds_format_integer(self.minEntries, input_name='minEntries'))
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            outfile.write(' access=%s' % (quote_attrib(self.access), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.enableParameter is not None and 'enableParameter' not in already_processed:
            already_processed.append('enableParameter')
            outfile.write(' enableParameter=%s' % (quote_attrib(self.enableParameter), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ModelObject', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for uniqueKey_ in self.uniqueKey:
            uniqueKey_.export(outfile, level, namespace_, name_='uniqueKey')
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component')
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
    def hasContent_(self):
        if (
            self.description is not None or
            self.uniqueKey or
            self.component or
            self.parameter
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ModelObject'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.maxEntries is not None and 'maxEntries' not in already_processed:
            already_processed.append('maxEntries')
            showIndent(outfile, level)
            outfile.write('maxEntries = %s,\n' % (self.maxEntries,))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.numEntriesParameter is not None and 'numEntriesParameter' not in already_processed:
            already_processed.append('numEntriesParameter')
            showIndent(outfile, level)
            outfile.write('numEntriesParameter = %s,\n' % (self.numEntriesParameter,))
        if self.minEntries is not None and 'minEntries' not in already_processed:
            already_processed.append('minEntries')
            showIndent(outfile, level)
            outfile.write('minEntries = %d,\n' % (self.minEntries,))
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            showIndent(outfile, level)
            outfile.write('access = %s,\n' % (self.access,))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.enableParameter is not None and 'enableParameter' not in already_processed:
            already_processed.append('enableParameter')
            showIndent(outfile, level)
            outfile.write('enableParameter = %s,\n' % (self.enableParameter,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('uniqueKey=[\n')
        level += 1
        for uniqueKey_ in self.uniqueKey:
            showIndent(outfile, level)
            outfile.write('model_.uniqueKeyType(\n')
            uniqueKey_.exportLiteral(outfile, level, name_='uniqueKeyType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentReference(\n')
            component_.exportLiteral(outfile, level, name_='ComponentReference')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.ModelParameter(\n')
            parameter_.exportLiteral(outfile, level, name_='ModelParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('maxEntries', node)
        if value is not None and 'maxEntries' not in already_processed:
            already_processed.append('maxEntries')
            self.maxEntries = value
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('numEntriesParameter', node)
        if value is not None and 'numEntriesParameter' not in already_processed:
            already_processed.append('numEntriesParameter')
            self.numEntriesParameter = value
        value = find_attr_value_('minEntries', node)
        if value is not None and 'minEntries' not in already_processed:
            already_processed.append('minEntries')
            try:
                self.minEntries = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.minEntries < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('access', node)
        if value is not None and 'access' not in already_processed:
            already_processed.append('access')
            self.access = value
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('enableParameter', node)
        if value is not None and 'enableParameter' not in already_processed:
            already_processed.append('enableParameter')
            self.enableParameter = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'uniqueKey':
            obj_ = uniqueKeyType.factory()
            obj_.build(child_)
            self.uniqueKey.append(obj_)
        elif nodeName_ == 'component':
            obj_ = ComponentReference.factory()
            obj_.build(child_)
            self.component.append(obj_)
        elif nodeName_ == 'parameter':
            obj_ = ModelParameter.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
# end class ModelObject


class ModelParameter(GeneratedsSuper):
    """Parameter definition and reference.MUST be unique within the parent
    object (this is checked by schema validation). MUST be present
    if and only if defining a new parameter.MUST be present if and
    only if modifying an existing parameter."""
    subclass = None
    superclass = None
    def __init__(self, status='current', forcedInform=False, name=None, access=None, activeNotify='normal', base=None, id=None, description=None, syntax=None):
        self.status = _cast(None, status)
        self.forcedInform = _cast(bool, forcedInform)
        self.name = _cast(None, name)
        self.access = _cast(None, access)
        self.activeNotify = _cast(None, activeNotify)
        self.base = _cast(None, base)
        self.id = _cast(None, id)
        self.description = description
        self.syntax = syntax
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ModelParameter.subclass:
            return ModelParameter.subclass(*args_, **kwargs_)
        else:
            return ModelParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_syntax(self): return self.syntax
    def set_syntax(self, syntax): self.syntax = syntax
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_forcedInform(self): return self.forcedInform
    def set_forcedInform(self, forcedInform): self.forcedInform = forcedInform
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_access(self): return self.access
    def set_access(self, access): self.access = access
    def get_activeNotify(self): return self.activeNotify
    def set_activeNotify(self, activeNotify): self.activeNotify = activeNotify
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ModelParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ModelParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ModelParameter'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.forcedInform is not None and 'forcedInform' not in already_processed:
            already_processed.append('forcedInform')
            outfile.write(' forcedInform="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.forcedInform)), input_name='forcedInform'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            outfile.write(' access=%s' % (quote_attrib(self.access), ))
        if self.activeNotify is not None and 'activeNotify' not in already_processed:
            already_processed.append('activeNotify')
            outfile.write(' activeNotify=%s' % (quote_attrib(self.activeNotify), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ModelParameter', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        if self.syntax:
            self.syntax.export(outfile, level, namespace_, name_='syntax')
    def hasContent_(self):
        if (
            self.description is not None or
            self.syntax is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ModelParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.forcedInform is not None and 'forcedInform' not in already_processed:
            already_processed.append('forcedInform')
            showIndent(outfile, level)
            outfile.write('forcedInform = %s,\n' % (self.forcedInform,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.access is not None and 'access' not in already_processed:
            already_processed.append('access')
            showIndent(outfile, level)
            outfile.write('access = %s,\n' % (self.access,))
        if self.activeNotify is not None and 'activeNotify' not in already_processed:
            already_processed.append('activeNotify')
            showIndent(outfile, level)
            outfile.write('activeNotify = %s,\n' % (self.activeNotify,))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.syntax is not None:
            showIndent(outfile, level)
            outfile.write('syntax=model_.Syntax(\n')
            self.syntax.exportLiteral(outfile, level, name_='syntax')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('forcedInform', node)
        if value is not None and 'forcedInform' not in already_processed:
            already_processed.append('forcedInform')
            if value in ('true', '1'):
                self.forcedInform = True
            elif value in ('false', '0'):
                self.forcedInform = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('access', node)
        if value is not None and 'access' not in already_processed:
            already_processed.append('access')
            self.access = value
        value = find_attr_value_('activeNotify', node)
        if value is not None and 'activeNotify' not in already_processed:
            already_processed.append('activeNotify')
            self.activeNotify = value
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'syntax':
            obj_ = Syntax.factory()
            obj_.build(child_)
            self.set_syntax(obj_)
# end class ModelParameter


class PathRefFacet(BaseStatusFacet):
    """Path name reference facet.Specifies the type of reference
    (A.2.3.6).If the list is non-empty, this parameter MUST only
    reference immediate children of matching objects
    (A.2.3.4).Specifies the point in the naming hierarchy relative
    to which targetParent applies (A.2.3.4).Specifies the type of
    item that can be referenced.Specifies the valid data types for a
    referenced parameter."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, refType=None, targetType='any', targetParentScope='normal', targetDataType='any', targetParent=''):
        super(PathRefFacet, self).__init__(status, description, )
        self.refType = _cast(None, refType)
        self.targetType = _cast(None, targetType)
        self.targetParentScope = _cast(None, targetParentScope)
        self.targetDataType = _cast(None, targetDataType)
        self.targetParent = _cast(None, targetParent)
        pass
    def factory(*args_, **kwargs_):
        if PathRefFacet.subclass:
            return PathRefFacet.subclass(*args_, **kwargs_)
        else:
            return PathRefFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refType(self): return self.refType
    def set_refType(self, refType): self.refType = refType
    def get_targetType(self): return self.targetType
    def set_targetType(self, targetType): self.targetType = targetType
    def get_targetParentScope(self): return self.targetParentScope
    def set_targetParentScope(self, targetParentScope): self.targetParentScope = targetParentScope
    def get_targetDataType(self): return self.targetDataType
    def set_targetDataType(self, targetDataType): self.targetDataType = targetDataType
    def get_targetParent(self): return self.targetParent
    def set_targetParent(self, targetParent): self.targetParent = targetParent
    def export(self, outfile, level, namespace_='tns:', name_='PathRefFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PathRefFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PathRefFacet'):
        super(PathRefFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PathRefFacet')
        if self.refType is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            outfile.write(' refType=%s' % (quote_attrib(self.refType), ))
        if self.targetType is not None and 'targetType' not in already_processed:
            already_processed.append('targetType')
            outfile.write(' targetType=%s' % (quote_attrib(self.targetType), ))
        if self.targetParentScope is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            outfile.write(' targetParentScope=%s' % (quote_attrib(self.targetParentScope), ))
        if self.targetDataType is not None and 'targetDataType' not in already_processed:
            already_processed.append('targetDataType')
            outfile.write(' targetDataType=%s' % (quote_attrib(self.targetDataType), ))
        if self.targetParent is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            outfile.write(' targetParent=%s' % (quote_attrib(self.targetParent), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PathRefFacet', fromsubclass_=False):
        super(PathRefFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(PathRefFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PathRefFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.refType is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            showIndent(outfile, level)
            outfile.write('refType = %s,\n' % (self.refType,))
        if self.targetType is not None and 'targetType' not in already_processed:
            already_processed.append('targetType')
            showIndent(outfile, level)
            outfile.write('targetType = %s,\n' % (self.targetType,))
        if self.targetParentScope is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            showIndent(outfile, level)
            outfile.write('targetParentScope = %s,\n' % (self.targetParentScope,))
        if self.targetDataType is not None and 'targetDataType' not in already_processed:
            already_processed.append('targetDataType')
            showIndent(outfile, level)
            outfile.write('targetDataType = %s,\n' % (self.targetDataType,))
        if self.targetParent is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            showIndent(outfile, level)
            outfile.write('targetParent = %s,\n' % (self.targetParent,))
        super(PathRefFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(PathRefFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('refType', node)
        if value is not None and 'refType' not in already_processed:
            already_processed.append('refType')
            self.refType = value
        value = find_attr_value_('targetType', node)
        if value is not None and 'targetType' not in already_processed:
            already_processed.append('targetType')
            self.targetType = value
        value = find_attr_value_('targetParentScope', node)
        if value is not None and 'targetParentScope' not in already_processed:
            already_processed.append('targetParentScope')
            self.targetParentScope = value
        value = find_attr_value_('targetDataType', node)
        if value is not None and 'targetDataType' not in already_processed:
            already_processed.append('targetDataType')
            self.targetDataType = value
        value = find_attr_value_('targetParent', node)
        if value is not None and 'targetParent' not in already_processed:
            already_processed.append('targetParent')
            self.targetParent = value
        super(PathRefFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PathRefFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PathRefFacet


class PatternFacet(BaseAccessFacet):
    """Pattern facet (pattern syntax is as in XML Schema)."""
    subclass = None
    superclass = BaseAccessFacet
    def __init__(self, status='current', description=None, access='readWrite', optional=False, value=None):
        super(PatternFacet, self).__init__(status, description, access, optional, )
        self.value = _cast(None, value)
        pass
    def factory(*args_, **kwargs_):
        if PatternFacet.subclass:
            return PatternFacet.subclass(*args_, **kwargs_)
        else:
            return PatternFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='PatternFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PatternFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='PatternFacet'):
        super(PatternFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PatternFacet')
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='PatternFacet', fromsubclass_=False):
        super(PatternFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(PatternFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PatternFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        super(PatternFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(PatternFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        super(PatternFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PatternFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PatternFacet


class Profile(GeneratedsSuper):
    """Profile definition and reference.MUST be unique within the model
    (this is checked by schema validation). MUST be present if and
    only if defining a new profile.MUST specify base if modifying an
    existing profile or if the profile version is greater than
    1.MUST specify extends if the profile extends other profile(s)."""
    subclass = None
    superclass = None
    def __init__(self, status='current', base=None, extends=None, name=None, id=None, description=None, parameter=None, object=None):
        self.status = _cast(None, status)
        self.base = _cast(None, base)
        self.extends = _cast(None, extends)
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.description = description
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        if object is None:
            self.object = []
        else:
            self.object = object
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if Profile.subclass:
            return Profile.subclass(*args_, **kwargs_)
        else:
            return Profile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_object(self): return self.object
    def set_object(self, object): self.object = object
    def add_object(self, value): self.object.append(value)
    def insert_object(self, index, value): self.object[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_base(self): return self.base
    def set_base(self, base): self.base = base
    def get_extends(self): return self.extends
    def set_extends(self, extends): self.extends = extends
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='Profile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Profile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Profile'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            outfile.write(' base=%s' % (quote_attrib(self.base), ))
        if self.extends is not None and 'extends' not in already_processed:
            already_processed.append('extends')
            outfile.write(' extends=%s' % (quote_attrib(self.extends), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Profile', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
        for object_ in self.object:
            object_.export(outfile, level, namespace_, name_='object')
    def hasContent_(self):
        if (
            self.description is not None or
            self.parameter or
            self.object
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Profile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.base is not None and 'base' not in already_processed:
            already_processed.append('base')
            showIndent(outfile, level)
            outfile.write('base = %s,\n' % (self.base,))
        if self.extends is not None and 'extends' not in already_processed:
            already_processed.append('extends')
            showIndent(outfile, level)
            outfile.write('extends = %s,\n' % (self.extends,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.ProfileParameter(\n')
            parameter_.exportLiteral(outfile, level, name_='ProfileParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('object=[\n')
        level += 1
        for object_ in self.object:
            showIndent(outfile, level)
            outfile.write('model_.ProfileObject(\n')
            object_.exportLiteral(outfile, level, name_='ProfileObject')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('base', node)
        if value is not None and 'base' not in already_processed:
            already_processed.append('base')
            self.base = value
        value = find_attr_value_('extends', node)
        if value is not None and 'extends' not in already_processed:
            already_processed.append('extends')
            self.extends = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'parameter':
            obj_ = ProfileParameter.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
        elif nodeName_ == 'object':
            obj_ = ProfileObject.factory()
            obj_.build(child_)
            self.object.append(obj_)
# end class Profile


class ProfileObject(GeneratedsSuper):
    """Profile object definition."""
    subclass = None
    superclass = None
    def __init__(self, status='current', requirement=None, ref=None, description=None, parameter=None):
        self.status = _cast(None, status)
        self.requirement = _cast(None, requirement)
        self.ref = _cast(None, ref)
        self.description = description
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ProfileObject.subclass:
            return ProfileObject.subclass(*args_, **kwargs_)
        else:
            return ProfileObject(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_requirement(self): return self.requirement
    def set_requirement(self, requirement): self.requirement = requirement
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ProfileObject', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProfileObject')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ProfileObject'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.requirement is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            outfile.write(' requirement=%s' % (quote_attrib(self.requirement), ))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ProfileObject', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
    def hasContent_(self):
        if (
            self.description is not None or
            self.parameter
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ProfileObject'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.requirement is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            showIndent(outfile, level)
            outfile.write('requirement = %s,\n' % (self.requirement,))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.ProfileParameter(\n')
            parameter_.exportLiteral(outfile, level, name_='ProfileParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('requirement', node)
        if value is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            self.requirement = value
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'parameter':
            obj_ = ProfileParameter.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
# end class ProfileObject


class ProfileParameter(GeneratedsSuper):
    """Profile parameter definition."""
    subclass = None
    superclass = None
    def __init__(self, status='current', requirement=None, ref=None, description=None):
        self.status = _cast(None, status)
        self.requirement = _cast(None, requirement)
        self.ref = _cast(None, ref)
        self.description = description
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if ProfileParameter.subclass:
            return ProfileParameter.subclass(*args_, **kwargs_)
        else:
            return ProfileParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_requirement(self): return self.requirement
    def set_requirement(self, requirement): self.requirement = requirement
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='ProfileParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProfileParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ProfileParameter'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (quote_attrib(self.status), ))
        if self.requirement is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            outfile.write(' requirement=%s' % (quote_attrib(self.requirement), ))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ProfileParameter', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
    def hasContent_(self):
        if (
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ProfileParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = %s,\n' % (self.status,))
        if self.requirement is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            showIndent(outfile, level)
            outfile.write('requirement = %s,\n' % (self.requirement,))
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('status', node)
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = find_attr_value_('requirement', node)
        if value is not None and 'requirement' not in already_processed:
            already_processed.append('requirement')
            self.requirement = value
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
# end class ProfileParameter


class RangeFacet(BaseAccessFacet):
    """Range facet."""
    subclass = None
    superclass = BaseAccessFacet
    def __init__(self, status='current', description=None, access='readWrite', optional=False, maxInclusive=None, step=1, minInclusive=None):
        super(RangeFacet, self).__init__(status, description, access, optional, )
        self.maxInclusive = _cast(int, maxInclusive)
        self.step = _cast(int, step)
        self.minInclusive = _cast(int, minInclusive)
        pass
    def factory(*args_, **kwargs_):
        if RangeFacet.subclass:
            return RangeFacet.subclass(*args_, **kwargs_)
        else:
            return RangeFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_maxInclusive(self): return self.maxInclusive
    def set_maxInclusive(self, maxInclusive): self.maxInclusive = maxInclusive
    def get_step(self): return self.step
    def set_step(self, step): self.step = step
    def get_minInclusive(self): return self.minInclusive
    def set_minInclusive(self, minInclusive): self.minInclusive = minInclusive
    def export(self, outfile, level, namespace_='tns:', name_='RangeFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RangeFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='RangeFacet'):
        super(RangeFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='RangeFacet')
        if self.maxInclusive is not None and 'maxInclusive' not in already_processed:
            already_processed.append('maxInclusive')
            outfile.write(' maxInclusive="%s"' % self.gds_format_integer(self.maxInclusive, input_name='maxInclusive'))
        if self.step is not None and 'step' not in already_processed:
            already_processed.append('step')
            outfile.write(' step="%s"' % self.gds_format_integer(self.step, input_name='step'))
        if self.minInclusive is not None and 'minInclusive' not in already_processed:
            already_processed.append('minInclusive')
            outfile.write(' minInclusive="%s"' % self.gds_format_integer(self.minInclusive, input_name='minInclusive'))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='RangeFacet', fromsubclass_=False):
        super(RangeFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(RangeFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RangeFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.maxInclusive is not None and 'maxInclusive' not in already_processed:
            already_processed.append('maxInclusive')
            showIndent(outfile, level)
            outfile.write('maxInclusive = %d,\n' % (self.maxInclusive,))
        if self.step is not None and 'step' not in already_processed:
            already_processed.append('step')
            showIndent(outfile, level)
            outfile.write('step = %d,\n' % (self.step,))
        if self.minInclusive is not None and 'minInclusive' not in already_processed:
            already_processed.append('minInclusive')
            showIndent(outfile, level)
            outfile.write('minInclusive = %d,\n' % (self.minInclusive,))
        super(RangeFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(RangeFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('maxInclusive', node)
        if value is not None and 'maxInclusive' not in already_processed:
            already_processed.append('maxInclusive')
            try:
                self.maxInclusive = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('step', node)
        if value is not None and 'step' not in already_processed:
            already_processed.append('step')
            try:
                self.step = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.step <= 0:
                raise_parse_error(node, 'Invalid PositiveInteger')
        value = find_attr_value_('minInclusive', node)
        if value is not None and 'minInclusive' not in already_processed:
            already_processed.append('minInclusive')
            try:
                self.minInclusive = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        super(RangeFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(RangeFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class RangeFacet


class SizeFacet(BaseAccessFacet):
    """Size facet."""
    subclass = None
    superclass = BaseAccessFacet
    def __init__(self, status='current', description=None, access='readWrite', optional=False, minLength=0, maxLength=None):
        super(SizeFacet, self).__init__(status, description, access, optional, )
        self.minLength = _cast(int, minLength)
        self.maxLength = _cast(int, maxLength)
        pass
    def factory(*args_, **kwargs_):
        if SizeFacet.subclass:
            return SizeFacet.subclass(*args_, **kwargs_)
        else:
            return SizeFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_minLength(self): return self.minLength
    def set_minLength(self, minLength): self.minLength = minLength
    def get_maxLength(self): return self.maxLength
    def set_maxLength(self, maxLength): self.maxLength = maxLength
    def export(self, outfile, level, namespace_='tns:', name_='SizeFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SizeFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='SizeFacet'):
        super(SizeFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SizeFacet')
        if self.minLength is not None and 'minLength' not in already_processed:
            already_processed.append('minLength')
            outfile.write(' minLength="%s"' % self.gds_format_integer(self.minLength, input_name='minLength'))
        if self.maxLength is not None and 'maxLength' not in already_processed:
            already_processed.append('maxLength')
            outfile.write(' maxLength="%s"' % self.gds_format_integer(self.maxLength, input_name='maxLength'))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='SizeFacet', fromsubclass_=False):
        super(SizeFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(SizeFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SizeFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.minLength is not None and 'minLength' not in already_processed:
            already_processed.append('minLength')
            showIndent(outfile, level)
            outfile.write('minLength = %d,\n' % (self.minLength,))
        if self.maxLength is not None and 'maxLength' not in already_processed:
            already_processed.append('maxLength')
            showIndent(outfile, level)
            outfile.write('maxLength = %d,\n' % (self.maxLength,))
        super(SizeFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(SizeFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minLength', node)
        if value is not None and 'minLength' not in already_processed:
            already_processed.append('minLength')
            try:
                self.minLength = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.minLength < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('maxLength', node)
        if value is not None and 'maxLength' not in already_processed:
            already_processed.append('maxLength')
            try:
                self.maxLength = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.maxLength < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        super(SizeFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(SizeFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class SizeFacet


class UnitsFacet(BaseStatusFacet):
    """Units facet."""
    subclass = None
    superclass = BaseStatusFacet
    def __init__(self, status='current', description=None, value=None):
        super(UnitsFacet, self).__init__(status, description, )
        self.value = _cast(None, value)
        pass
    def factory(*args_, **kwargs_):
        if UnitsFacet.subclass:
            return UnitsFacet.subclass(*args_, **kwargs_)
        else:
            return UnitsFacet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='UnitsFacet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitsFacet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='UnitsFacet'):
        super(UnitsFacet, self).exportAttributes(outfile, level, already_processed, namespace_, name_='UnitsFacet')
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (quote_attrib(self.value), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='UnitsFacet', fromsubclass_=False):
        super(UnitsFacet, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            super(UnitsFacet, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnitsFacet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = %s,\n' % (self.value,))
        super(UnitsFacet, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(UnitsFacet, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        super(UnitsFacet, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(UnitsFacet, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class UnitsFacet


class Syntax(GeneratedsSuper):
    """Parameter syntax specification.If true, MUST always read back as the
    null value for the parameter's base data type (A.2.3.5).If true,
    setting this parameter triggers a CPE action. Such a parameter
    is not part of the device configuration and MUST always read
    back as the null value for the parameter's base data type
    (A.2.3.5)."""
    subclass = None
    superclass = None
    def __init__(self, hidden=False, command=False, list=None, base64=None, boolean=None, dateTime=None, hexBinary=None, int=None, long=None, string=None, unsignedInt=None, unsignedLong=None, dataType=None, default=None):
        self.hidden = _cast(bool, hidden)
        self.command = _cast(bool, command)
        self.list = list
        self.base64 = base64
        self.boolean = boolean
        self.dateTime = dateTime
        self.hexBinary = hexBinary
        self.int = int
        self.long = long
        self.string = string
        self.unsignedInt = unsignedInt
        self.unsignedLong = unsignedLong
        self.dataType = dataType
        self.default = default
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if Syntax.subclass:
            return Syntax.subclass(*args_, **kwargs_)
        else:
            return Syntax(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_list(self): return self.list
    def set_list(self, list): self.list = list
    def get_base64(self): return self.base64
    def set_base64(self, base64): self.base64 = base64
    def get_boolean(self): return self.boolean
    def set_boolean(self, boolean): self.boolean = boolean
    def get_dateTime(self): return self.dateTime
    def set_dateTime(self, dateTime): self.dateTime = dateTime
    def get_hexBinary(self): return self.hexBinary
    def set_hexBinary(self, hexBinary): self.hexBinary = hexBinary
    def get_int(self): return self.int
    def set_int(self, int): self.int = int
    def get_long(self): return self.long
    def set_long(self, long): self.long = long
    def get_string(self): return self.string
    def set_string(self, string): self.string = string
    def get_unsignedInt(self): return self.unsignedInt
    def set_unsignedInt(self, unsignedInt): self.unsignedInt = unsignedInt
    def get_unsignedLong(self): return self.unsignedLong
    def set_unsignedLong(self, unsignedLong): self.unsignedLong = unsignedLong
    def get_dataType(self): return self.dataType
    def set_dataType(self, dataType): self.dataType = dataType
    def get_default(self): return self.default
    def set_default(self, default): self.default = default
    def get_hidden(self): return self.hidden
    def set_hidden(self, hidden): self.hidden = hidden
    def get_command(self): return self.command
    def set_command(self, command): self.command = command
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='Syntax', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Syntax')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Syntax'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.hidden is not None and 'hidden' not in already_processed:
            already_processed.append('hidden')
            outfile.write(' hidden="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.hidden)), input_name='hidden'))
        if self.command is not None and 'command' not in already_processed:
            already_processed.append('command')
            outfile.write(' command="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.command)), input_name='command'))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Syntax', fromsubclass_=False):
        if self.list:
            self.list.export(outfile, level, namespace_, name_='list')
        if self.base64:
            self.base64.export(outfile, level, namespace_, name_='base64', )
        if self.boolean:
            self.boolean.export(outfile, level, namespace_, name_='boolean', )
        if self.dateTime:
            self.dateTime.export(outfile, level, namespace_, name_='dateTime', )
        if self.hexBinary:
            self.hexBinary.export(outfile, level, namespace_, name_='hexBinary', )
        if self.int:
            self.int.export(outfile, level, namespace_, name_='int', )
        if self.long:
            self.long.export(outfile, level, namespace_, name_='long', )
        if self.string:
            self.string.export(outfile, level, namespace_, name_='string', )
        if self.unsignedInt:
            self.unsignedInt.export(outfile, level, namespace_, name_='unsignedInt', )
        if self.unsignedLong:
            self.unsignedLong.export(outfile, level, namespace_, name_='unsignedLong', )
        if self.dataType:
            self.dataType.export(outfile, level, namespace_, name_='dataType', )
        if self.default:
            self.default.export(outfile, level, namespace_, name_='default')
    def hasContent_(self):
        if (
            self.list is not None or
            self.base64 is not None or
            self.boolean is not None or
            self.dateTime is not None or
            self.hexBinary is not None or
            self.int is not None or
            self.long is not None or
            self.string is not None or
            self.unsignedInt is not None or
            self.unsignedLong is not None or
            self.dataType is not None or
            self.default is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Syntax'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.hidden is not None and 'hidden' not in already_processed:
            already_processed.append('hidden')
            showIndent(outfile, level)
            outfile.write('hidden = %s,\n' % (self.hidden,))
        if self.command is not None and 'command' not in already_processed:
            already_processed.append('command')
            showIndent(outfile, level)
            outfile.write('command = %s,\n' % (self.command,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.list is not None:
            showIndent(outfile, level)
            outfile.write('list=model_.ListFacet(\n')
            self.list.exportLiteral(outfile, level, name_='list')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.base64 is not None:
            showIndent(outfile, level)
            outfile.write('base64=model_.base64Type2(\n')
            self.base64.exportLiteral(outfile, level, name_='base64')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.boolean is not None:
            showIndent(outfile, level)
            outfile.write('boolean=model_.booleanType2(\n')
            self.boolean.exportLiteral(outfile, level, name_='boolean')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dateTime is not None:
            showIndent(outfile, level)
            outfile.write('dateTime=model_.dateTimeType2(\n')
            self.dateTime.exportLiteral(outfile, level, name_='dateTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hexBinary is not None:
            showIndent(outfile, level)
            outfile.write('hexBinary=model_.hexBinaryType2(\n')
            self.hexBinary.exportLiteral(outfile, level, name_='hexBinary')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.int is not None:
            showIndent(outfile, level)
            outfile.write('int=model_.intType2(\n')
            self.int.exportLiteral(outfile, level, name_='int')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.long is not None:
            showIndent(outfile, level)
            outfile.write('long=model_.longType2(\n')
            self.long.exportLiteral(outfile, level, name_='long')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.string is not None:
            showIndent(outfile, level)
            outfile.write('string=model_.stringType2(\n')
            self.string.exportLiteral(outfile, level, name_='string')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unsignedInt is not None:
            showIndent(outfile, level)
            outfile.write('unsignedInt=model_.unsignedIntType2(\n')
            self.unsignedInt.exportLiteral(outfile, level, name_='unsignedInt')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unsignedLong is not None:
            showIndent(outfile, level)
            outfile.write('unsignedLong=model_.unsignedLongType2(\n')
            self.unsignedLong.exportLiteral(outfile, level, name_='unsignedLong')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataType is not None:
            showIndent(outfile, level)
            outfile.write('dataType=model_.DataTypeReference(\n')
            self.dataType.exportLiteral(outfile, level, name_='dataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.default is not None:
            showIndent(outfile, level)
            outfile.write('default=model_.DefaultFacet(\n')
            self.default.exportLiteral(outfile, level, name_='default')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('hidden', node)
        if value is not None and 'hidden' not in already_processed:
            already_processed.append('hidden')
            if value in ('true', '1'):
                self.hidden = True
            elif value in ('false', '0'):
                self.hidden = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('command', node)
        if value is not None and 'command' not in already_processed:
            already_processed.append('command')
            if value in ('true', '1'):
                self.command = True
            elif value in ('false', '0'):
                self.command = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'list':
            obj_ = ListFacet.factory()
            obj_.build(child_)
            self.set_list(obj_)
        elif nodeName_ == 'base64':
            obj_ = base64Type2.factory()
            obj_.build(child_)
            self.set_base64(obj_)
        elif nodeName_ == 'boolean':
            obj_ = booleanType2.factory()
            obj_.build(child_)
            self.set_boolean(obj_)
        elif nodeName_ == 'dateTime':
            obj_ = dateTimeType2.factory()
            obj_.build(child_)
            self.set_dateTime(obj_)
        elif nodeName_ == 'hexBinary':
            obj_ = hexBinaryType2.factory()
            obj_.build(child_)
            self.set_hexBinary(obj_)
        elif nodeName_ == 'int':
            obj_ = intType2.factory()
            obj_.build(child_)
            self.set_int(obj_)
        elif nodeName_ == 'long':
            obj_ = longType2.factory()
            obj_.build(child_)
            self.set_long(obj_)
        elif nodeName_ == 'string':
            obj_ = stringType2.factory()
            obj_.build(child_)
            self.set_string(obj_)
        elif nodeName_ == 'unsignedInt':
            obj_ = unsignedIntType2.factory()
            obj_.build(child_)
            self.set_unsignedInt(obj_)
        elif nodeName_ == 'unsignedLong':
            obj_ = unsignedLongType2.factory()
            obj_.build(child_)
            self.set_unsignedLong(obj_)
        elif nodeName_ == 'dataType':
            obj_ = DataTypeReference.factory()
            obj_.build(child_)
            self.set_dataType(obj_)
        elif nodeName_ == 'default':
            obj_ = DefaultFacet.factory()
            obj_.build(child_)
            self.set_default(obj_)
# end class Syntax


class document(GeneratedsSuper):
    """CWMP Data Model Definition XML Schema (DM Schema) instance documents
    can contain any or all of the following: * Data type definitions
    * Root Object definitions (including profiles) * Service Object
    definitions (including profiles) * Component definitions *
    Vendor extension definitionsURI of the associated specification
    document, e.g. the BBF Technical Report. This URI SHOULD
    uniquely identify the specification. More than one DM Schema
    instance document MAY reference the same specification. Where
    the specification is a BBF document, the URI naming rules
    specified in A.2.1.1 MUST be used. For example, to reference
    TR-106 Issue 1 Amendment 2, the value of this attribute would be
    urn:broadband-forum-org:tr-106-1-2."""
    subclass = None
    superclass = None
    def __init__(self, spec=None, description=None, importxx=None, dataType=None, bibliography=None, component=None, model=None):
        self.spec = _cast(None, spec)
        self.description = description
        if importxx is None:
            self.importxx = []
        else:
            self.importxx = importxx
        if dataType is None:
            self.dataType = []
        else:
            self.dataType = dataType
        self.bibliography = bibliography
        if component is None:
            self.component = []
        else:
            self.component = component
        if model is None:
            self.model = []
        else:
            self.model = model
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if document.subclass:
            return document.subclass(*args_, **kwargs_)
        else:
            return document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_import(self): return self.importxx
    def set_import(self, importxx): self.importxx = importxx
    def add_import(self, value): self.importxx.append(value)
    def insert_import(self, index, value): self.importxx[index] = value
    def get_dataType(self): return self.dataType
    def set_dataType(self, dataType): self.dataType = dataType
    def add_dataType(self, value): self.dataType.append(value)
    def insert_dataType(self, index, value): self.dataType[index] = value
    def get_bibliography(self): return self.bibliography
    def set_bibliography(self, bibliography): self.bibliography = bibliography
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def get_model(self): return self.model
    def set_model(self, model): self.model = model
    def add_model(self, value): self.model.append(value)
    def insert_model(self, index, value): self.model[index] = value
    def get_spec(self): return self.spec
    def set_spec(self, spec): self.spec = spec
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='document', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='document')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='document'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.spec is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            outfile.write(' spec=%s' % (self.gds_format_string(quote_attrib(self.spec).encode(ExternalEncoding), input_name='spec'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='document', fromsubclass_=False):
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        for import_ in self.importxx:
            import_.export(outfile, level, namespace_, name_='import')
        for dataType_ in self.dataType:
            dataType_.export(outfile, level, namespace_, name_='dataType')
        if self.bibliography:
            self.bibliography.export(outfile, level, namespace_, name_='bibliography')
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component')
        for model_ in self.model:
            model_.export(outfile, level, namespace_, name_='model')
    def hasContent_(self):
        if (
            self.description is not None or
            self.importxx or
            self.dataType or
            self.bibliography is not None or
            self.component or
            self.model
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='document'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.spec is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            showIndent(outfile, level)
            outfile.write('spec = "%s",\n' % (self.spec,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=model_.Description(\n')
            self.description.exportLiteral(outfile, level, name_='description')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('importxx=[\n')
        level += 1
        for import_ in self.importxx:
            showIndent(outfile, level)
            outfile.write('model_.Import(\n')
            import_.exportLiteral(outfile, level, name_='Import')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('dataType=[\n')
        level += 1
        for dataType_ in self.dataType:
            showIndent(outfile, level)
            outfile.write('model_.DataTypeDefinition(\n')
            dataType_.exportLiteral(outfile, level, name_='DataTypeDefinition')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.bibliography is not None:
            showIndent(outfile, level)
            outfile.write('bibliography=model_.Bibliography(\n')
            self.bibliography.exportLiteral(outfile, level, name_='bibliography')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentDefinition(\n')
            component_.exportLiteral(outfile, level, name_='ComponentDefinition')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('model=[\n')
        level += 1
        for model_ in self.model:
            showIndent(outfile, level)
            outfile.write('model_.Model(\n')
            model_.exportLiteral(outfile, level, name_='Model')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('spec', node)
        if value is not None and 'spec' not in already_processed:
            already_processed.append('spec')
            self.spec = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            obj_ = Description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif nodeName_ == 'import':
            obj_ = Import.factory()
            obj_.build(child_)
            self.importxx.append(obj_)
        elif nodeName_ == 'dataType':
            obj_ = DataTypeDefinition.factory()
            obj_.build(child_)
            self.dataType.append(obj_)
        elif nodeName_ == 'bibliography':
            obj_ = Bibliography.factory()
            obj_.build(child_)
            self.set_bibliography(obj_)
        elif nodeName_ == 'component':
            obj_ = ComponentDefinition.factory()
            obj_.build(child_)
            self.component.append(obj_)
        elif nodeName_ == 'model':
            obj_ = Model.factory()
            obj_.build(child_)
            self.model.append(obj_)
# end class document


class base64Type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if base64Type.subclass:
            return base64Type.subclass(*args_, **kwargs_)
        else:
            return base64Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='base64Type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='base64Type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='base64Type'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='base64Type', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='base64Type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class base64Type


class booleanType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if booleanType.subclass:
            return booleanType.subclass(*args_, **kwargs_)
        else:
            return booleanType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='booleanType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='booleanType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='booleanType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='booleanType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='booleanType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class booleanType


class dateTimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if dateTimeType.subclass:
            return dateTimeType.subclass(*args_, **kwargs_)
        else:
            return dateTimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='dateTimeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dateTimeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='dateTimeType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='dateTimeType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dateTimeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dateTimeType


class hexBinaryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if hexBinaryType.subclass:
            return hexBinaryType.subclass(*args_, **kwargs_)
        else:
            return hexBinaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='hexBinaryType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hexBinaryType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='hexBinaryType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='hexBinaryType', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hexBinaryType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class hexBinaryType


class intType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if intType.subclass:
            return intType.subclass(*args_, **kwargs_)
        else:
            return intType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='intType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='intType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='intType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='intType', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='intType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class intType


class longType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if longType.subclass:
            return longType.subclass(*args_, **kwargs_)
        else:
            return longType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='longType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='longType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='longType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='longType', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='longType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class longType


class stringType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None, pathRef=None, enumeration=None, enumerationRef=None, pattern=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        if pathRef is None:
            self.pathRef = []
        else:
            self.pathRef = pathRef
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
        if enumerationRef is None:
            self.enumerationRef = []
        else:
            self.enumerationRef = enumerationRef
        if pattern is None:
            self.pattern = []
        else:
            self.pattern = pattern
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if stringType.subclass:
            return stringType.subclass(*args_, **kwargs_)
        else:
            return stringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_pathRef(self): return self.pathRef
    def set_pathRef(self, pathRef): self.pathRef = pathRef
    def add_pathRef(self, value): self.pathRef.append(value)
    def insert_pathRef(self, index, value): self.pathRef[index] = value
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration(self, index, value): self.enumeration[index] = value
    def get_enumerationRef(self): return self.enumerationRef
    def set_enumerationRef(self, enumerationRef): self.enumerationRef = enumerationRef
    def add_enumerationRef(self, value): self.enumerationRef.append(value)
    def insert_enumerationRef(self, index, value): self.enumerationRef[index] = value
    def get_pattern(self): return self.pattern
    def set_pattern(self, pattern): self.pattern = pattern
    def add_pattern(self, value): self.pattern.append(value)
    def insert_pattern(self, index, value): self.pattern[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='stringType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stringType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='stringType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='stringType', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
        for pathRef_ in self.pathRef:
            pathRef_.export(outfile, level, namespace_, name_='pathRef')
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration')
        for enumerationRef_ in self.enumerationRef:
            enumerationRef_.export(outfile, level, namespace_, name_='enumerationRef')
        for pattern_ in self.pattern:
            pattern_.export(outfile, level, namespace_, name_='pattern')
    def hasContent_(self):
        if (
            self.size or
            self.pathRef or
            self.enumeration or
            self.enumerationRef or
            self.pattern
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stringType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pathRef=[\n')
        level += 1
        for pathRef_ in self.pathRef:
            showIndent(outfile, level)
            outfile.write('model_.PathRefFacet(\n')
            pathRef_.exportLiteral(outfile, level, name_='PathRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumeration=[\n')
        level += 1
        for enumeration_ in self.enumeration:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationFacet(\n')
            enumeration_.exportLiteral(outfile, level, name_='EnumerationFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumerationRef=[\n')
        level += 1
        for enumerationRef_ in self.enumerationRef:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationRefFacet(\n')
            enumerationRef_.exportLiteral(outfile, level, name_='EnumerationRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pattern=[\n')
        level += 1
        for pattern_ in self.pattern:
            showIndent(outfile, level)
            outfile.write('model_.PatternFacet(\n')
            pattern_.exportLiteral(outfile, level, name_='PatternFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        elif nodeName_ == 'pathRef':
            obj_ = PathRefFacet.factory()
            obj_.build(child_)
            self.pathRef.append(obj_)
        elif nodeName_ == 'enumeration':
            obj_ = EnumerationFacet.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
        elif nodeName_ == 'enumerationRef':
            obj_ = EnumerationRefFacet.factory()
            obj_.build(child_)
            self.enumerationRef.append(obj_)
        elif nodeName_ == 'pattern':
            obj_ = PatternFacet.factory()
            obj_.build(child_)
            self.pattern.append(obj_)
# end class stringType


class unsignedIntType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedIntType.subclass:
            return unsignedIntType.subclass(*args_, **kwargs_)
        else:
            return unsignedIntType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedIntType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedIntType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedIntType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedIntType', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedIntType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedIntType


class unsignedLongType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedLongType.subclass:
            return unsignedLongType.subclass(*args_, **kwargs_)
        else:
            return unsignedLongType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedLongType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedLongType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedLongType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedLongType', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedLongType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedLongType


class referenceType(GeneratedsSuper):
    """Uniquely identifies the reference (this is checked by schema
    validation). Can be referenced from descriptions by using the
    {{bibref}} template. See A.2.2.4."""
    subclass = None
    superclass = None
    def __init__(self, id=None, name=None, title=None, organization=None, category=None, date=None, hyperlink=None):
        self.id = _cast(None, id)
        self.name = name
        self.title = title
        self.organization = organization
        self.category = category
        self.date = date
        if hyperlink is None:
            self.hyperlink = []
        else:
            self.hyperlink = hyperlink
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if referenceType.subclass:
            return referenceType.subclass(*args_, **kwargs_)
        else:
            return referenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_organization(self): return self.organization
    def set_organization(self, organization): self.organization = organization
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def get_date(self): return self.date
    def set_date(self, date): self.date = date
    def get_hyperlink(self): return self.hyperlink
    def set_hyperlink(self, hyperlink): self.hyperlink = hyperlink
    def add_hyperlink(self, value): self.hyperlink.append(value)
    def insert_hyperlink(self, index, value): self.hyperlink[index] = value
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='referenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='referenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='referenceType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='referenceType', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('<%stitle>%s</%stitle>\n' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('<%sorganization>%s</%sorganization>\n' % (namespace_, self.gds_format_string(quote_xml(self.organization).encode(ExternalEncoding), input_name='organization'), namespace_))
        if self.category is not None:
            showIndent(outfile, level)
            outfile.write('<%scategory>%s</%scategory>\n' % (namespace_, self.gds_format_string(quote_xml(self.category).encode(ExternalEncoding), input_name='category'), namespace_))
        if self.date is not None:
            showIndent(outfile, level)
            outfile.write('<%sdate>%s</%sdate>\n' % (namespace_, self.gds_format_string(quote_xml(self.date).encode(ExternalEncoding), input_name='date'), namespace_))
        for hyperlink_ in self.hyperlink:
            showIndent(outfile, level)
            outfile.write('<%shyperlink>%s</%shyperlink>\n' % (namespace_, self.gds_format_string(quote_xml(hyperlink_).encode(ExternalEncoding), input_name='hyperlink'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.title is not None or
            self.organization is not None or
            self.category is not None or
            self.date is not None or
            self.hyperlink
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='referenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('organization=%s,\n' % quote_python(self.organization).encode(ExternalEncoding))
        if self.category is not None:
            showIndent(outfile, level)
            outfile.write('category=%s,\n' % quote_python(self.category).encode(ExternalEncoding))
        if self.date is not None:
            showIndent(outfile, level)
            outfile.write('date=%s,\n' % quote_python(self.date).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('hyperlink=[\n')
        level += 1
        for hyperlink_ in self.hyperlink:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(hyperlink_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = re_.sub(String_cleanup_pat_, " ", name_).strip()
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = re_.sub(String_cleanup_pat_, " ", title_).strip()
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'organization':
            organization_ = child_.text
            organization_ = re_.sub(String_cleanup_pat_, " ", organization_).strip()
            organization_ = self.gds_validate_string(organization_, node, 'organization')
            self.organization = organization_
        elif nodeName_ == 'category':
            category_ = child_.text
            category_ = re_.sub(String_cleanup_pat_, " ", category_).strip()
            category_ = self.gds_validate_string(category_, node, 'category')
            self.category = category_
        elif nodeName_ == 'date':
            date_ = child_.text
            date_ = re_.sub(String_cleanup_pat_, " ", date_).strip()
            date_ = self.gds_validate_string(date_, node, 'date')
            self.date = date_
        elif nodeName_ == 'hyperlink':
            hyperlink_ = child_.text
            hyperlink_ = self.gds_validate_string(hyperlink_, node, 'hyperlink')
            self.hyperlink.append(hyperlink_)
# end class referenceType


class base64Type1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if base64Type1.subclass:
            return base64Type1.subclass(*args_, **kwargs_)
        else:
            return base64Type1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='base64Type1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='base64Type1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='base64Type1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='base64Type1', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='base64Type1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class base64Type1


class booleanType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if booleanType1.subclass:
            return booleanType1.subclass(*args_, **kwargs_)
        else:
            return booleanType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='booleanType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='booleanType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='booleanType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='booleanType1', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='booleanType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class booleanType1


class dateTimeType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if dateTimeType1.subclass:
            return dateTimeType1.subclass(*args_, **kwargs_)
        else:
            return dateTimeType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='dateTimeType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dateTimeType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='dateTimeType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='dateTimeType1', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dateTimeType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dateTimeType1


class hexBinaryType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if hexBinaryType1.subclass:
            return hexBinaryType1.subclass(*args_, **kwargs_)
        else:
            return hexBinaryType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='hexBinaryType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hexBinaryType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='hexBinaryType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='hexBinaryType1', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hexBinaryType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class hexBinaryType1


class intType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if intType1.subclass:
            return intType1.subclass(*args_, **kwargs_)
        else:
            return intType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='intType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='intType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='intType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='intType1', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='intType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class intType1


class longType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if longType1.subclass:
            return longType1.subclass(*args_, **kwargs_)
        else:
            return longType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='longType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='longType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='longType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='longType1', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='longType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class longType1


class stringType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None, pathRef=None, enumeration=None, enumerationRef=None, pattern=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        if pathRef is None:
            self.pathRef = []
        else:
            self.pathRef = pathRef
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
        if enumerationRef is None:
            self.enumerationRef = []
        else:
            self.enumerationRef = enumerationRef
        if pattern is None:
            self.pattern = []
        else:
            self.pattern = pattern
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if stringType1.subclass:
            return stringType1.subclass(*args_, **kwargs_)
        else:
            return stringType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_pathRef(self): return self.pathRef
    def set_pathRef(self, pathRef): self.pathRef = pathRef
    def add_pathRef(self, value): self.pathRef.append(value)
    def insert_pathRef(self, index, value): self.pathRef[index] = value
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration(self, index, value): self.enumeration[index] = value
    def get_enumerationRef(self): return self.enumerationRef
    def set_enumerationRef(self, enumerationRef): self.enumerationRef = enumerationRef
    def add_enumerationRef(self, value): self.enumerationRef.append(value)
    def insert_enumerationRef(self, index, value): self.enumerationRef[index] = value
    def get_pattern(self): return self.pattern
    def set_pattern(self, pattern): self.pattern = pattern
    def add_pattern(self, value): self.pattern.append(value)
    def insert_pattern(self, index, value): self.pattern[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='stringType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stringType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='stringType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='stringType1', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
        for pathRef_ in self.pathRef:
            pathRef_.export(outfile, level, namespace_, name_='pathRef')
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration')
        for enumerationRef_ in self.enumerationRef:
            enumerationRef_.export(outfile, level, namespace_, name_='enumerationRef')
        for pattern_ in self.pattern:
            pattern_.export(outfile, level, namespace_, name_='pattern')
    def hasContent_(self):
        if (
            self.size or
            self.pathRef or
            self.enumeration or
            self.enumerationRef or
            self.pattern
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stringType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pathRef=[\n')
        level += 1
        for pathRef_ in self.pathRef:
            showIndent(outfile, level)
            outfile.write('model_.PathRefFacet(\n')
            pathRef_.exportLiteral(outfile, level, name_='PathRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumeration=[\n')
        level += 1
        for enumeration_ in self.enumeration:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationFacet(\n')
            enumeration_.exportLiteral(outfile, level, name_='EnumerationFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumerationRef=[\n')
        level += 1
        for enumerationRef_ in self.enumerationRef:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationRefFacet(\n')
            enumerationRef_.exportLiteral(outfile, level, name_='EnumerationRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pattern=[\n')
        level += 1
        for pattern_ in self.pattern:
            showIndent(outfile, level)
            outfile.write('model_.PatternFacet(\n')
            pattern_.exportLiteral(outfile, level, name_='PatternFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        elif nodeName_ == 'pathRef':
            obj_ = PathRefFacet.factory()
            obj_.build(child_)
            self.pathRef.append(obj_)
        elif nodeName_ == 'enumeration':
            obj_ = EnumerationFacet.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
        elif nodeName_ == 'enumerationRef':
            obj_ = EnumerationRefFacet.factory()
            obj_.build(child_)
            self.enumerationRef.append(obj_)
        elif nodeName_ == 'pattern':
            obj_ = PatternFacet.factory()
            obj_.build(child_)
            self.pattern.append(obj_)
# end class stringType1


class unsignedIntType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedIntType1.subclass:
            return unsignedIntType1.subclass(*args_, **kwargs_)
        else:
            return unsignedIntType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedIntType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedIntType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedIntType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedIntType1', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedIntType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedIntType1


class unsignedLongType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedLongType1.subclass:
            return unsignedLongType1.subclass(*args_, **kwargs_)
        else:
            return unsignedLongType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedLongType1', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedLongType1')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedLongType1'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedLongType1', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedLongType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedLongType1


class dataTypeType(GeneratedsSuper):
    """If omitted, data type is known by the same name in both this and the
    referenced document."""
    subclass = None
    superclass = None
    def __init__(self, ref=None, name=None):
        self.ref = _cast(None, ref)
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if dataTypeType.subclass:
            return dataTypeType.subclass(*args_, **kwargs_)
        else:
            return dataTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='tns:', name_='dataTypeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dataTypeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='dataTypeType'):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='dataTypeType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dataTypeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dataTypeType


class componentType(GeneratedsSuper):
    """If omitted, component is known by the same name in both this and the
    referenced document."""
    subclass = None
    superclass = None
    def __init__(self, ref=None, name=None):
        self.ref = _cast(None, ref)
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if componentType.subclass:
            return componentType.subclass(*args_, **kwargs_)
        else:
            return componentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='tns:', name_='componentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='componentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='componentType'):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='componentType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='componentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class componentType


class modelType(GeneratedsSuper):
    """If omitted, model is known by the same name in both this and the
    referenced document."""
    subclass = None
    superclass = None
    def __init__(self, ref=None, name=None):
        self.ref = _cast(None, ref)
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if modelType.subclass:
            return modelType.subclass(*args_, **kwargs_)
        else:
            return modelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='tns:', name_='modelType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='modelType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='modelType'):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='modelType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='modelType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class modelType


class uniqueKeyType(GeneratedsSuper):
    """Indicates whether this is a functional (true) or non-functional
    (false) key."""
    subclass = None
    superclass = None
    def __init__(self, functional=True, parameter=None):
        self.functional = _cast(bool, functional)
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
    def factory(*args_, **kwargs_):
        if uniqueKeyType.subclass:
            return uniqueKeyType.subclass(*args_, **kwargs_)
        else:
            return uniqueKeyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_parameter(self): return self.parameter
    def set_parameter(self, parameter): self.parameter = parameter
    def add_parameter(self, value): self.parameter.append(value)
    def insert_parameter(self, index, value): self.parameter[index] = value
    def get_functional(self): return self.functional
    def set_functional(self, functional): self.functional = functional
    def export(self, outfile, level, namespace_='tns:', name_='uniqueKeyType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='uniqueKeyType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='uniqueKeyType'):
        if self.functional is not None and 'functional' not in already_processed:
            already_processed.append('functional')
            outfile.write(' functional="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.functional)), input_name='functional'))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='uniqueKeyType', fromsubclass_=False):
        for parameter_ in self.parameter:
            parameter_.export(outfile, level, namespace_, name_='parameter')
    def hasContent_(self):
        if (
            self.parameter
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='uniqueKeyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.functional is not None and 'functional' not in already_processed:
            already_processed.append('functional')
            showIndent(outfile, level)
            outfile.write('functional = %s,\n' % (self.functional,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('parameter=[\n')
        level += 1
        for parameter_ in self.parameter:
            showIndent(outfile, level)
            outfile.write('model_.parameterType(\n')
            parameter_.exportLiteral(outfile, level, name_='parameterType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('functional', node)
        if value is not None and 'functional' not in already_processed:
            already_processed.append('functional')
            if value in ('true', '1'):
                self.functional = True
            elif value in ('false', '0'):
                self.functional = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'parameter':
            obj_ = parameterType.factory()
            obj_.build(child_)
            self.parameter.append(obj_)
# end class uniqueKeyType


class parameterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ref=None):
        self.ref = _cast(None, ref)
        pass
    def factory(*args_, **kwargs_):
        if parameterType.subclass:
            return parameterType.subclass(*args_, **kwargs_)
        else:
            return parameterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ref(self): return self.ref
    def set_ref(self, ref): self.ref = ref
    def export(self, outfile, level, namespace_='tns:', name_='parameterType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='parameterType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='parameterType'):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            outfile.write(' ref=%s' % (quote_attrib(self.ref), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='parameterType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='parameterType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ref is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            showIndent(outfile, level)
            outfile.write('ref = %s,\n' % (self.ref,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ref', node)
        if value is not None and 'ref' not in already_processed:
            already_processed.append('ref')
            self.ref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class parameterType


class base64Type2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if base64Type2.subclass:
            return base64Type2.subclass(*args_, **kwargs_)
        else:
            return base64Type2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='base64Type2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='base64Type2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='base64Type2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='base64Type2', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='base64Type2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class base64Type2


class booleanType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if booleanType2.subclass:
            return booleanType2.subclass(*args_, **kwargs_)
        else:
            return booleanType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='booleanType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='booleanType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='booleanType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='booleanType2', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='booleanType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class booleanType2


class dateTimeType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if dateTimeType2.subclass:
            return dateTimeType2.subclass(*args_, **kwargs_)
        else:
            return dateTimeType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='dateTimeType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dateTimeType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='dateTimeType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='dateTimeType2', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dateTimeType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dateTimeType2


class hexBinaryType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if hexBinaryType2.subclass:
            return hexBinaryType2.subclass(*args_, **kwargs_)
        else:
            return hexBinaryType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='hexBinaryType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hexBinaryType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='hexBinaryType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='hexBinaryType2', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
    def hasContent_(self):
        if (
            self.size
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hexBinaryType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
# end class hexBinaryType2


class intType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if intType2.subclass:
            return intType2.subclass(*args_, **kwargs_)
        else:
            return intType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='intType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='intType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='intType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='intType2', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='intType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class intType2


class longType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if longType2.subclass:
            return longType2.subclass(*args_, **kwargs_)
        else:
            return longType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='longType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='longType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='longType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='longType2', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='longType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class longType2


class stringType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, size=None, pathRef=None, enumeration=None, enumerationRef=None, pattern=None):
        if size is None:
            self.size = []
        else:
            self.size = size
        if pathRef is None:
            self.pathRef = []
        else:
            self.pathRef = pathRef
        if enumeration is None:
            self.enumeration = []
        else:
            self.enumeration = enumeration
        if enumerationRef is None:
            self.enumerationRef = []
        else:
            self.enumerationRef = enumerationRef
        if pattern is None:
            self.pattern = []
        else:
            self.pattern = pattern
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if stringType2.subclass:
            return stringType2.subclass(*args_, **kwargs_)
        else:
            return stringType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def add_size(self, value): self.size.append(value)
    def insert_size(self, index, value): self.size[index] = value
    def get_pathRef(self): return self.pathRef
    def set_pathRef(self, pathRef): self.pathRef = pathRef
    def add_pathRef(self, value): self.pathRef.append(value)
    def insert_pathRef(self, index, value): self.pathRef[index] = value
    def get_enumeration(self): return self.enumeration
    def set_enumeration(self, enumeration): self.enumeration = enumeration
    def add_enumeration(self, value): self.enumeration.append(value)
    def insert_enumeration(self, index, value): self.enumeration[index] = value
    def get_enumerationRef(self): return self.enumerationRef
    def set_enumerationRef(self, enumerationRef): self.enumerationRef = enumerationRef
    def add_enumerationRef(self, value): self.enumerationRef.append(value)
    def insert_enumerationRef(self, index, value): self.enumerationRef[index] = value
    def get_pattern(self): return self.pattern
    def set_pattern(self, pattern): self.pattern = pattern
    def add_pattern(self, value): self.pattern.append(value)
    def insert_pattern(self, index, value): self.pattern[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='stringType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stringType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='stringType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='stringType2', fromsubclass_=False):
        for size_ in self.size:
            size_.export(outfile, level, namespace_, name_='size')
        for pathRef_ in self.pathRef:
            pathRef_.export(outfile, level, namespace_, name_='pathRef')
        for enumeration_ in self.enumeration:
            enumeration_.export(outfile, level, namespace_, name_='enumeration')
        for enumerationRef_ in self.enumerationRef:
            enumerationRef_.export(outfile, level, namespace_, name_='enumerationRef')
        for pattern_ in self.pattern:
            pattern_.export(outfile, level, namespace_, name_='pattern')
    def hasContent_(self):
        if (
            self.size or
            self.pathRef or
            self.enumeration or
            self.enumerationRef or
            self.pattern
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stringType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('size=[\n')
        level += 1
        for size_ in self.size:
            showIndent(outfile, level)
            outfile.write('model_.SizeFacet(\n')
            size_.exportLiteral(outfile, level, name_='SizeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pathRef=[\n')
        level += 1
        for pathRef_ in self.pathRef:
            showIndent(outfile, level)
            outfile.write('model_.PathRefFacet(\n')
            pathRef_.exportLiteral(outfile, level, name_='PathRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumeration=[\n')
        level += 1
        for enumeration_ in self.enumeration:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationFacet(\n')
            enumeration_.exportLiteral(outfile, level, name_='EnumerationFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('enumerationRef=[\n')
        level += 1
        for enumerationRef_ in self.enumerationRef:
            showIndent(outfile, level)
            outfile.write('model_.EnumerationRefFacet(\n')
            enumerationRef_.exportLiteral(outfile, level, name_='EnumerationRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('pattern=[\n')
        level += 1
        for pattern_ in self.pattern:
            showIndent(outfile, level)
            outfile.write('model_.PatternFacet(\n')
            pattern_.exportLiteral(outfile, level, name_='PatternFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'size':
            obj_ = SizeFacet.factory()
            obj_.build(child_)
            self.size.append(obj_)
        elif nodeName_ == 'pathRef':
            obj_ = PathRefFacet.factory()
            obj_.build(child_)
            self.pathRef.append(obj_)
        elif nodeName_ == 'enumeration':
            obj_ = EnumerationFacet.factory()
            obj_.build(child_)
            self.enumeration.append(obj_)
        elif nodeName_ == 'enumerationRef':
            obj_ = EnumerationRefFacet.factory()
            obj_.build(child_)
            self.enumerationRef.append(obj_)
        elif nodeName_ == 'pattern':
            obj_ = PatternFacet.factory()
            obj_.build(child_)
            self.pattern.append(obj_)
# end class stringType2


class unsignedIntType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, instanceRef=None, range=None, units=None):
        if instanceRef is None:
            self.instanceRef = []
        else:
            self.instanceRef = instanceRef
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedIntType2.subclass:
            return unsignedIntType2.subclass(*args_, **kwargs_)
        else:
            return unsignedIntType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_instanceRef(self): return self.instanceRef
    def set_instanceRef(self, instanceRef): self.instanceRef = instanceRef
    def add_instanceRef(self, value): self.instanceRef.append(value)
    def insert_instanceRef(self, index, value): self.instanceRef[index] = value
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedIntType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedIntType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedIntType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedIntType2', fromsubclass_=False):
        for instanceRef_ in self.instanceRef:
            instanceRef_.export(outfile, level, namespace_, name_='instanceRef')
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.instanceRef or
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedIntType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('instanceRef=[\n')
        level += 1
        for instanceRef_ in self.instanceRef:
            showIndent(outfile, level)
            outfile.write('model_.InstanceRefFacet(\n')
            instanceRef_.exportLiteral(outfile, level, name_='InstanceRefFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'instanceRef':
            obj_ = InstanceRefFacet.factory()
            obj_.build(child_)
            self.instanceRef.append(obj_)
        elif nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedIntType2


class unsignedLongType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, range=None, units=None):
        if range is None:
            self.range = []
        else:
            self.range = range
        if units is None:
            self.units = []
        else:
            self.units = units
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if unsignedLongType2.subclass:
            return unsignedLongType2.subclass(*args_, **kwargs_)
        else:
            return unsignedLongType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_range(self): return self.range
    def set_range(self, range): self.range = range
    def add_range(self, value): self.range.append(value)
    def insert_range(self, index, value): self.range[index] = value
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def add_units(self, value): self.units.append(value)
    def insert_units(self, index, value): self.units[index] = value
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def export(self, outfile, level, namespace_='tns:', name_='unsignedLongType2', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unsignedLongType2')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='unsignedLongType2'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.append(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.append(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.append(name)
                        outfile.write(' %s=%s' % (name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='unsignedLongType2', fromsubclass_=False):
        for range_ in self.range:
            range_.export(outfile, level, namespace_, name_='range')
        for units_ in self.units:
            units_.export(outfile, level, namespace_, name_='units')
    def hasContent_(self):
        if (
            self.range or
            self.units
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unsignedLongType2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('range=[\n')
        level += 1
        for range_ in self.range:
            showIndent(outfile, level)
            outfile.write('model_.RangeFacet(\n')
            range_.exportLiteral(outfile, level, name_='RangeFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('units=[\n')
        level += 1
        for units_ in self.units:
            showIndent(outfile, level)
            outfile.write('model_.UnitsFacet(\n')
            units_.exportLiteral(outfile, level, name_='UnitsFacet')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'range':
            obj_ = RangeFacet.factory()
            obj_.build(child_)
            self.range.append(obj_)
        elif nodeName_ == 'units':
            obj_ = UnitsFacet.factory()
            obj_.build(child_)
            self.units.append(obj_)
# end class unsignedLongType2


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BaseStatusFacet'
        rootClass = BaseStatusFacet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_=rootTag, 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BaseStatusFacet'
        rootClass = BaseStatusFacet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="BaseStatusFacet",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'BaseStatusFacet'
        rootClass = BaseStatusFacet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from cwmp-datamodel-1-3 import *\n\n')
##     sys.stdout.write('import cwmp-datamodel-1-3 as model_\n\n')
##     sys.stdout.write('rootObj = model_.rootTag(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "BaseAccessFacet",
    "BaseStatusFacet",
    "Bibliography",
    "ComponentDefinition",
    "ComponentReference",
    "DataTypeDefinition",
    "DataTypeReference",
    "DefaultFacet",
    "Description",
    "EnumerationFacet",
    "EnumerationRefFacet",
    "Import",
    "InstanceRefFacet",
    "ListFacet",
    "Model",
    "ModelObject",
    "ModelParameter",
    "PathRefFacet",
    "PatternFacet",
    "Profile",
    "ProfileObject",
    "ProfileParameter",
    "RangeFacet",
    "SizeFacet",
    "Syntax",
    "UnitsFacet",
    "base64Type",
    "base64Type1",
    "base64Type2",
    "booleanType",
    "booleanType1",
    "booleanType2",
    "componentType",
    "dataTypeType",
    "dateTimeType",
    "dateTimeType1",
    "dateTimeType2",
    "document",
    "hexBinaryType",
    "hexBinaryType1",
    "hexBinaryType2",
    "intType",
    "intType1",
    "intType2",
    "longType",
    "longType1",
    "longType2",
    "modelType",
    "parameterType",
    "referenceType",
    "stringType",
    "stringType1",
    "stringType2",
    "uniqueKeyType",
    "unsignedIntType",
    "unsignedIntType1",
    "unsignedIntType2",
    "unsignedLongType",
    "unsignedLongType1",
    "unsignedLongType2"
    ]
