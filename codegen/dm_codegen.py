#!/usr/bin/python
#
# Copyright 2011 Google Inc. All Rights Reserved.

"""Code Generator for XML access classes for CWMP DeviceModel objects.

Generates classes to parse and emit XML for objects defined using tr-106
device models.
<parameter> turns into an instance variable.

DeviceModel files expected to be passed to be passed to this code generator
include:
http://www.broadband-forum.org/cwmp/tr-098-1-0-0.xml
http://www.broadband-forum.org/cwmp/tr-098-1-1-0.xml
http://www.broadband-forum.org/cwmp/tr-098-1-2-0.xml
http://www.broadband-forum.org/cwmp/tr-181-2-0-1.xml
http://www.broadband-forum.org/cwmp/tr-181-2-1-0.xml
http://www.broadband-forum.org/cwmp/tr-181-2-2-0.xml

This generator itself relies on classes generated for cwmp-datamodel-1-3.xsd
by generateDS.
Very clever, young man, very clever, but its code generators all the way down.
"""

__author__ = 'dgentry@google.com (Denton Gentry)'

import cwmp_datamodel_1_3 as dm
import optparse
import string
import sys

def EmitPrologue(out):
  """Emit the first few lines of a Python source file.

  Args:
    out - list of strings to collect for output
  """
  out.append("#!/usr/bin/python\n")
  out.append("#\n# THIS FILE IS GENERATED BY " + sys.argv[0] + "\n")
  out.append("# DO NOT MAKE CHANGES HERE, THEY WILL BE OVERWRITTEN.\n\n")
  out.append("\"\"\"Classes to parse and emit XML for DeviceModel objects "
             "defined in CWMP specs.\n\"\"\"\n\n")
  out.append("import xmlwitch\n")
  out.append("\n")


def XmlNameMangle(XMLname):
  """Convert an XML object name to a suitable Python class name.

  Examples:
    Device.Routing.RIP. returns Device_Routing_RIP_
    Device.Ethernet.Link.{i}.Stats. returns Device_Ethernet_Link_0i0_Stats_

  Args:
    XMLname - the object name taken directly from the XML file.

  Returns:
    A suitable Python class name.
  """
  tab = string.maketrans(".{}", "_00")
  return string.translate(XMLname, tab)


def EmitParameter(param, out, prefix=""):
  """Emit a Python property for a DeviceModel <parameter>

  Args:
    param - The XML <parameter>.
    out - list of strings to collect for output.
    prefix - string to prepend to each output line (generally whitespace
        to get the indentation right)
  """
  defvalue = "None"
  if param.syntax and hasattr(param.syntax.default, "value"):
    if param.syntax.boolean:
      defvalue = (param.syntax.default.value.lower() == "true")
    elif param.syntax.string:
      defvalue = '"' + param.syntax.default.value + '"'
    else:
      defvalue = param.syntax.default.value
  out.append("{0}self.p_{1} = {2}\n".format(prefix, param.name, defvalue))


def EmitToXml(objname, params, out, prefix=""):
  """Emit the ToXml() method for all parameters

  Args:
    objname - name of this DeviceModel <object>.
    params - list of generateDS objects for a DeviceModel <parameter> node.
    out - list of strings to collect for output
  """
  # objname is xml.Device.WiFi.AccessPoint., split last path component
  xmlnodename = objname.split('.')[-2]
  xmlbasename = '.'.join(objname.split('.')[0:-3])

  out.append(prefix + 'def ToXml(self, xml):\n')
  out.append(prefix + '  \"\"\"Serialize to Xml.\n\n')
  out.append(prefix + '  Args:\n')
  out.append(prefix + '    xml: The xmlwitch object for ' + xmlbasename + '\n')
  out.append(prefix + '  Returns: the xmlwitch object after adding fields.\n')
  out.append(prefix + '  \"\"\"\n')

  if params:
    out.append("{0}  with xml.{1}:\n".format(prefix, xmlnodename))
    for p in params:
      out.append("{0}    if self.p_{1}:\n".format(prefix, p.name))
      out.append("{0}      xml.{1} = self.p_{1}\n".format(prefix, p.name))
    out.append("{0}  return xml\n".format(prefix))
  else:
    out.append(prefix + "{0}    pass\n")
  out.append("\n")


def EmitClassForObj(name, objlist, out):
  """Generate a class for a CWMP DeviceModel <object>.

  Args:
    name - the name of this object, as taken from the XML <object name="...">
    objlist - a list of generateDS objects for a DeviceModel <object> node.
    out - list of strings to collect for output
  """
  out.append("class {0}(object):\n".format(XmlNameMangle(name)))
  out.append("  def __init__(self):\n")

  params = []
  for obj in objlist:
    for param in obj.parameter:
      params.append(param)

  if params:
    out.append("    # <parameter> variables\n")
    for param in params:
      EmitParameter(param, out, "    ")
  else:
    out.append("    pass\n")

  out.append("\n")
  EmitToXml(name, params, out, "  ")
  out.append("\n")


def DmObjectName(obj):
  """Get the name of a DeviceModel object.

  The first spec to define a new object will create it as:
  <object name="ObjName" ...>

  Subsequent specs which extend the object will reference it as:
  <object base="ObjName" ...>

  Args:
    obj - the XML node of a DeviceModel <object>

  Returns:
    The string name, from either the name= or base= attribute.
  """
  if obj.name:
    return obj.name
  elif obj.base:
    return obj.base
  else:
    return None


def DmObjIsInteresting(name, emit_these):
  """Determine whether to emit a class for the object.

  Args:
    name - name of the DeviceModel <object>
    emit_these - frozenset of object names to emit

  Returns:
    boolean
  """
  if not emit_these:
    return True
  for e in emit_these:
    if name.startswith(e):
      return True


def CollectObjects(objdict, rootnode, emit_these):
  """Add all interesting <object> nodes from the DeviceModel XML tree to dict.

  The device model is defined in tr-106, which provides an XML schema to
  validate DeviceModel definition files.
  http://www.broadband-forum.org/cwmp/tr-106-1-2-0.xml

  The current schema (at the time of this writing) is:
  http://www.broadband-forum.org/cwmp/cwmp-datamodel-1-3.xsd

  The general XML format is:
  <document>
    <component>
      <object> - objects which can go at several top level models
    <model>
      <object> - objects specific to a model

  This function walks through all <objects> in the tree. If they are
  in emit_these, it adds them to objdict.

  Args:
    objdict - dict in which to place the objects
    rootnode - the root of the XML document.
    emit_these - a frozenset of object names which we are interested in.
  """
  for model in rootnode.model:
    for obj in model.object:
      name = DmObjectName(obj)
      if DmObjIsInteresting(name, emit_these):
        objdict.setdefault(name, []).append(obj)


def ParseCmdline():
  """Handle command line arguments.
  """
  optparser = optparse.OptionParser(
      description='Code generator for CWMP DataModel objects')
  optparser.add_option('--outfile', help="filename to write generated code to.")
  optparser.add_option(
      '--dmfile', action='append',
      help="CWMP DeviceModel XML file to parse. Can be repeated.",
      default=['../schema/tr-181-2-0-1.xml'])
  optparser.add_option(
      '--emit', action='append',
      help="<object> names to generate classes for. Can be repeated.",
      default=[])
  return optparser.parse_args()


def main():
  (options, args) = ParseCmdline()

  emit_these = frozenset(args)
  objdict = dict()
  for file in options.dmfile:
    root = dm.parse(file)
    CollectObjects(objdict, root, options.emit)

  out = []
  EmitPrologue(out)
  for key, obj in sorted(objdict.items()):
    EmitClassForObj(key, obj, out)

  outstr = "".join(out)
  if options.outfile:
    open(options.outfile, "w").write(outstr)
  else:
    print(outstr)

if __name__ == '__main__':
  main()
